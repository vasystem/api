// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/aircraft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2faircraft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2faircraft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vasystem/api/v2/airlines.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vasystem_2fapi_2fv2_2faircraft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vasystem_2fapi_2fv2_2faircraft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2faircraft_2eproto;
namespace vasystem {
namespace api {
namespace v2 {
class AircraftModel;
struct AircraftModelDefaultTypeInternal;
extern AircraftModelDefaultTypeInternal _AircraftModel_default_instance_;
class AircraftType;
struct AircraftTypeDefaultTypeInternal;
extern AircraftTypeDefaultTypeInternal _AircraftType_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> ::vasystem::api::v2::AircraftModel* Arena::CreateMaybeMessage<::vasystem::api::v2::AircraftModel>(Arena*);
template<> ::vasystem::api::v2::AircraftType* Arena::CreateMaybeMessage<::vasystem::api::v2::AircraftType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class AircraftType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.AircraftType) */ {
 public:
  inline AircraftType() : AircraftType(nullptr) {}
  ~AircraftType() override;
  explicit PROTOBUF_CONSTEXPR AircraftType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AircraftType(const AircraftType& from);
  AircraftType(AircraftType&& from) noexcept
    : AircraftType() {
    *this = ::std::move(from);
  }

  inline AircraftType& operator=(const AircraftType& from) {
    CopyFrom(from);
    return *this;
  }
  inline AircraftType& operator=(AircraftType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AircraftType& default_instance() {
    return *internal_default_instance();
  }
  static inline const AircraftType* internal_default_instance() {
    return reinterpret_cast<const AircraftType*>(
               &_AircraftType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AircraftType& a, AircraftType& b) {
    a.Swap(&b);
  }
  inline void Swap(AircraftType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AircraftType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AircraftType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AircraftType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AircraftType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AircraftType& from) {
    AircraftType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AircraftType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.AircraftType";
  }
  protected:
  explicit AircraftType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIcaoCodeFieldNumber = 2,
    kIataCodeFieldNumber = 3,
    kNameFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string icao_code = 2 [json_name = "icaoCode"];
  void clear_icao_code();
  const std::string& icao_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icao_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icao_code();
  PROTOBUF_NODISCARD std::string* release_icao_code();
  void set_allocated_icao_code(std::string* icao_code);
  private:
  const std::string& _internal_icao_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icao_code(const std::string& value);
  std::string* _internal_mutable_icao_code();
  public:

  // string iata_code = 3 [json_name = "iataCode"];
  void clear_iata_code();
  const std::string& iata_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iata_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iata_code();
  PROTOBUF_NODISCARD std::string* release_iata_code();
  void set_allocated_iata_code(std::string* iata_code);
  private:
  const std::string& _internal_iata_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iata_code(const std::string& value);
  std::string* _internal_mutable_iata_code();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.AircraftType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icao_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iata_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2faircraft_2eproto;
};
// -------------------------------------------------------------------

class AircraftModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.AircraftModel) */ {
 public:
  inline AircraftModel() : AircraftModel(nullptr) {}
  ~AircraftModel() override;
  explicit PROTOBUF_CONSTEXPR AircraftModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AircraftModel(const AircraftModel& from);
  AircraftModel(AircraftModel&& from) noexcept
    : AircraftModel() {
    *this = ::std::move(from);
  }

  inline AircraftModel& operator=(const AircraftModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AircraftModel& operator=(AircraftModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AircraftModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AircraftModel* internal_default_instance() {
    return reinterpret_cast<const AircraftModel*>(
               &_AircraftModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AircraftModel& a, AircraftModel& b) {
    a.Swap(&b);
  }
  inline void Swap(AircraftModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AircraftModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AircraftModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AircraftModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AircraftModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AircraftModel& from) {
    AircraftModel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AircraftModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.AircraftModel";
  }
  protected:
  explicit AircraftModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 4,
    kAircraftTypeFieldNumber = 2,
    kAirlineFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .vasystem.api.v2.AircraftType aircraft_type = 2 [json_name = "aircraftType"];
  bool has_aircraft_type() const;
  private:
  bool _internal_has_aircraft_type() const;
  public:
  void clear_aircraft_type();
  const ::vasystem::api::v2::AircraftType& aircraft_type() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::AircraftType* release_aircraft_type();
  ::vasystem::api::v2::AircraftType* mutable_aircraft_type();
  void set_allocated_aircraft_type(::vasystem::api::v2::AircraftType* aircraft_type);
  private:
  const ::vasystem::api::v2::AircraftType& _internal_aircraft_type() const;
  ::vasystem::api::v2::AircraftType* _internal_mutable_aircraft_type();
  public:
  void unsafe_arena_set_allocated_aircraft_type(
      ::vasystem::api::v2::AircraftType* aircraft_type);
  ::vasystem::api::v2::AircraftType* unsafe_arena_release_aircraft_type();

  // .vasystem.api.v2.Airline airline = 3 [json_name = "airline"];
  bool has_airline() const;
  private:
  bool _internal_has_airline() const;
  public:
  void clear_airline();
  const ::vasystem::api::v2::Airline& airline() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::Airline* release_airline();
  ::vasystem::api::v2::Airline* mutable_airline();
  void set_allocated_airline(::vasystem::api::v2::Airline* airline);
  private:
  const ::vasystem::api::v2::Airline& _internal_airline() const;
  ::vasystem::api::v2::Airline* _internal_mutable_airline();
  public:
  void unsafe_arena_set_allocated_airline(
      ::vasystem::api::v2::Airline* airline);
  ::vasystem::api::v2::Airline* unsafe_arena_release_airline();

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.AircraftModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::vasystem::api::v2::AircraftType* aircraft_type_;
    ::vasystem::api::v2::Airline* airline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2faircraft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AircraftType

// string id = 1 [json_name = "id"];
inline void AircraftType::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AircraftType::id() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftType.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftType::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftType.id)
}
inline std::string* AircraftType::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftType.id)
  return _s;
}
inline const std::string& AircraftType::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AircraftType::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftType::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftType::release_id() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftType.id)
  return _impl_.id_.Release();
}
inline void AircraftType::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftType.id)
}

// string icao_code = 2 [json_name = "icaoCode"];
inline void AircraftType::clear_icao_code() {
  _impl_.icao_code_.ClearToEmpty();
}
inline const std::string& AircraftType::icao_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftType.icao_code)
  return _internal_icao_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftType::set_icao_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icao_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftType.icao_code)
}
inline std::string* AircraftType::mutable_icao_code() {
  std::string* _s = _internal_mutable_icao_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftType.icao_code)
  return _s;
}
inline const std::string& AircraftType::_internal_icao_code() const {
  return _impl_.icao_code_.Get();
}
inline void AircraftType::_internal_set_icao_code(const std::string& value) {
  
  _impl_.icao_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftType::_internal_mutable_icao_code() {
  
  return _impl_.icao_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftType::release_icao_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftType.icao_code)
  return _impl_.icao_code_.Release();
}
inline void AircraftType::set_allocated_icao_code(std::string* icao_code) {
  if (icao_code != nullptr) {
    
  } else {
    
  }
  _impl_.icao_code_.SetAllocated(icao_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icao_code_.IsDefault()) {
    _impl_.icao_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftType.icao_code)
}

// string iata_code = 3 [json_name = "iataCode"];
inline void AircraftType::clear_iata_code() {
  _impl_.iata_code_.ClearToEmpty();
}
inline const std::string& AircraftType::iata_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftType.iata_code)
  return _internal_iata_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftType::set_iata_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iata_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftType.iata_code)
}
inline std::string* AircraftType::mutable_iata_code() {
  std::string* _s = _internal_mutable_iata_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftType.iata_code)
  return _s;
}
inline const std::string& AircraftType::_internal_iata_code() const {
  return _impl_.iata_code_.Get();
}
inline void AircraftType::_internal_set_iata_code(const std::string& value) {
  
  _impl_.iata_code_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftType::_internal_mutable_iata_code() {
  
  return _impl_.iata_code_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftType::release_iata_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftType.iata_code)
  return _impl_.iata_code_.Release();
}
inline void AircraftType::set_allocated_iata_code(std::string* iata_code) {
  if (iata_code != nullptr) {
    
  } else {
    
  }
  _impl_.iata_code_.SetAllocated(iata_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iata_code_.IsDefault()) {
    _impl_.iata_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftType.iata_code)
}

// string name = 4 [json_name = "name"];
inline void AircraftType::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AircraftType::name() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftType::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftType.name)
}
inline std::string* AircraftType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftType.name)
  return _s;
}
inline const std::string& AircraftType::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AircraftType::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftType::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftType::release_name() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftType.name)
  return _impl_.name_.Release();
}
inline void AircraftType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftType.name)
}

// -------------------------------------------------------------------

// AircraftModel

// string id = 1 [json_name = "id"];
inline void AircraftModel::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AircraftModel::id() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftModel.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftModel::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftModel.id)
}
inline std::string* AircraftModel::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftModel.id)
  return _s;
}
inline const std::string& AircraftModel::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AircraftModel::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftModel::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftModel::release_id() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftModel.id)
  return _impl_.id_.Release();
}
inline void AircraftModel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftModel.id)
}

// .vasystem.api.v2.AircraftType aircraft_type = 2 [json_name = "aircraftType"];
inline bool AircraftModel::_internal_has_aircraft_type() const {
  return this != internal_default_instance() && _impl_.aircraft_type_ != nullptr;
}
inline bool AircraftModel::has_aircraft_type() const {
  return _internal_has_aircraft_type();
}
inline void AircraftModel::clear_aircraft_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.aircraft_type_ != nullptr) {
    delete _impl_.aircraft_type_;
  }
  _impl_.aircraft_type_ = nullptr;
}
inline const ::vasystem::api::v2::AircraftType& AircraftModel::_internal_aircraft_type() const {
  const ::vasystem::api::v2::AircraftType* p = _impl_.aircraft_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::AircraftType&>(
      ::vasystem::api::v2::_AircraftType_default_instance_);
}
inline const ::vasystem::api::v2::AircraftType& AircraftModel::aircraft_type() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftModel.aircraft_type)
  return _internal_aircraft_type();
}
inline void AircraftModel::unsafe_arena_set_allocated_aircraft_type(
    ::vasystem::api::v2::AircraftType* aircraft_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aircraft_type_);
  }
  _impl_.aircraft_type_ = aircraft_type;
  if (aircraft_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.AircraftModel.aircraft_type)
}
inline ::vasystem::api::v2::AircraftType* AircraftModel::release_aircraft_type() {
  
  ::vasystem::api::v2::AircraftType* temp = _impl_.aircraft_type_;
  _impl_.aircraft_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::AircraftType* AircraftModel::unsafe_arena_release_aircraft_type() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftModel.aircraft_type)
  
  ::vasystem::api::v2::AircraftType* temp = _impl_.aircraft_type_;
  _impl_.aircraft_type_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::AircraftType* AircraftModel::_internal_mutable_aircraft_type() {
  
  if (_impl_.aircraft_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::AircraftType>(GetArenaForAllocation());
    _impl_.aircraft_type_ = p;
  }
  return _impl_.aircraft_type_;
}
inline ::vasystem::api::v2::AircraftType* AircraftModel::mutable_aircraft_type() {
  ::vasystem::api::v2::AircraftType* _msg = _internal_mutable_aircraft_type();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftModel.aircraft_type)
  return _msg;
}
inline void AircraftModel::set_allocated_aircraft_type(::vasystem::api::v2::AircraftType* aircraft_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aircraft_type_;
  }
  if (aircraft_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aircraft_type);
    if (message_arena != submessage_arena) {
      aircraft_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aircraft_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aircraft_type_ = aircraft_type;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftModel.aircraft_type)
}

// .vasystem.api.v2.Airline airline = 3 [json_name = "airline"];
inline bool AircraftModel::_internal_has_airline() const {
  return this != internal_default_instance() && _impl_.airline_ != nullptr;
}
inline bool AircraftModel::has_airline() const {
  return _internal_has_airline();
}
inline const ::vasystem::api::v2::Airline& AircraftModel::_internal_airline() const {
  const ::vasystem::api::v2::Airline* p = _impl_.airline_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::Airline&>(
      ::vasystem::api::v2::_Airline_default_instance_);
}
inline const ::vasystem::api::v2::Airline& AircraftModel::airline() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftModel.airline)
  return _internal_airline();
}
inline void AircraftModel::unsafe_arena_set_allocated_airline(
    ::vasystem::api::v2::Airline* airline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airline_);
  }
  _impl_.airline_ = airline;
  if (airline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.AircraftModel.airline)
}
inline ::vasystem::api::v2::Airline* AircraftModel::release_airline() {
  
  ::vasystem::api::v2::Airline* temp = _impl_.airline_;
  _impl_.airline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::Airline* AircraftModel::unsafe_arena_release_airline() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftModel.airline)
  
  ::vasystem::api::v2::Airline* temp = _impl_.airline_;
  _impl_.airline_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::Airline* AircraftModel::_internal_mutable_airline() {
  
  if (_impl_.airline_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::Airline>(GetArenaForAllocation());
    _impl_.airline_ = p;
  }
  return _impl_.airline_;
}
inline ::vasystem::api::v2::Airline* AircraftModel::mutable_airline() {
  ::vasystem::api::v2::Airline* _msg = _internal_mutable_airline();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftModel.airline)
  return _msg;
}
inline void AircraftModel::set_allocated_airline(::vasystem::api::v2::Airline* airline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airline_);
  }
  if (airline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airline));
    if (message_arena != submessage_arena) {
      airline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airline, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.airline_ = airline;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftModel.airline)
}

// string name = 4 [json_name = "name"];
inline void AircraftModel::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AircraftModel::name() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.AircraftModel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AircraftModel::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.AircraftModel.name)
}
inline std::string* AircraftModel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.AircraftModel.name)
  return _s;
}
inline const std::string& AircraftModel::_internal_name() const {
  return _impl_.name_.Get();
}
inline void AircraftModel::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* AircraftModel::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* AircraftModel::release_name() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.AircraftModel.name)
  return _impl_.name_.Release();
}
inline void AircraftModel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.AircraftModel.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace vasystem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2faircraft_2eproto
