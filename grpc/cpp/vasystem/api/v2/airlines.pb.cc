// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/airlines.proto

#include "vasystem/api/v2/airlines.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vasystem {
namespace api {
namespace v2 {
PROTOBUF_CONSTEXPR ListAirlinesRequest::ListAirlinesRequest(
    ::_pbi::ConstantInitialized) {}
struct ListAirlinesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAirlinesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAirlinesRequestDefaultTypeInternal() {}
  union {
    ListAirlinesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAirlinesRequestDefaultTypeInternal _ListAirlinesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListAirlinesResponse::ListAirlinesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.airlines_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListAirlinesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAirlinesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAirlinesResponseDefaultTypeInternal() {}
  union {
    ListAirlinesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAirlinesResponseDefaultTypeInternal _ListAirlinesResponse_default_instance_;
PROTOBUF_CONSTEXPR Airline::Airline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icao_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iata_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_icao_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_iata_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AirlineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AirlineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AirlineDefaultTypeInternal() {}
  union {
    Airline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AirlineDefaultTypeInternal _Airline_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
static ::_pb::Metadata file_level_metadata_vasystem_2fapi_2fv2_2fairlines_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_vasystem_2fapi_2fv2_2fairlines_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vasystem_2fapi_2fv2_2fairlines_2eproto = nullptr;

const uint32_t TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListAirlinesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListAirlinesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListAirlinesResponse, _impl_.airlines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.icao_code_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.iata_code_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.display_icao_code_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.display_iata_code_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Airline, _impl_.name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vasystem::api::v2::ListAirlinesRequest)},
  { 6, -1, -1, sizeof(::vasystem::api::v2::ListAirlinesResponse)},
  { 13, -1, -1, sizeof(::vasystem::api::v2::Airline)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vasystem::api::v2::_ListAirlinesRequest_default_instance_._instance,
  &::vasystem::api::v2::_ListAirlinesResponse_default_instance_._instance,
  &::vasystem::api::v2::_Airline_default_instance_._instance,
};

const char descriptor_table_protodef_vasystem_2fapi_2fv2_2fairlines_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036vasystem/api/v2/airlines.proto\022\017vasyst"
  "em.api.v2\"\025\n\023ListAirlinesRequest\"L\n\024List"
  "AirlinesResponse\0224\n\010airlines\030\001 \003(\0132\030.vas"
  "ystem.api.v2.AirlineR\010airlines\"\277\001\n\007Airli"
  "ne\022\016\n\002id\030\001 \001(\tR\002id\022\033\n\ticao_code\030\002 \001(\tR\010i"
  "caoCode\022\033\n\tiata_code\030\003 \001(\tR\010iataCode\022*\n\021"
  "display_icao_code\030\004 \001(\tR\017displayIcaoCode"
  "\022*\n\021display_iata_code\030\005 \001(\tR\017displayIata"
  "Code\022\022\n\004name\030\006 \001(\tR\004name2p\n\017AirlinesServ"
  "ice\022]\n\014ListAirlines\022$.vasystem.api.v2.Li"
  "stAirlinesRequest\032%.vasystem.api.v2.List"
  "AirlinesResponse\"\000B\271\001\n\023dev.vasystem.api."
  "v2B\rAirlinesProtoP\001Z5github.com/vasystem"
  "/api/grpc/go/vasystem/api/v2;apiv2\242\002\003VAX"
  "\252\002\017Vasystem.Api.V2\312\002\017Vasystem\\Api\\V2\342\002\033V"
  "asystem\\Api\\V2\\GPBMetadata\352\002\021Vasystem::A"
  "pi::V2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto = {
    false, false, 654, descriptor_table_protodef_vasystem_2fapi_2fv2_2fairlines_2eproto,
    "vasystem/api/v2/airlines.proto",
    &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto::offsets,
    file_level_metadata_vasystem_2fapi_2fv2_2fairlines_2eproto, file_level_enum_descriptors_vasystem_2fapi_2fv2_2fairlines_2eproto,
    file_level_service_descriptors_vasystem_2fapi_2fv2_2fairlines_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_getter() {
  return &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vasystem_2fapi_2fv2_2fairlines_2eproto(&descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto);
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class ListAirlinesRequest::_Internal {
 public:
};

ListAirlinesRequest::ListAirlinesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.ListAirlinesRequest)
}
ListAirlinesRequest::ListAirlinesRequest(const ListAirlinesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ListAirlinesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.ListAirlinesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAirlinesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAirlinesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListAirlinesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fairlines_2eproto[0]);
}

// ===================================================================

class ListAirlinesResponse::_Internal {
 public:
};

ListAirlinesResponse::ListAirlinesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.ListAirlinesResponse)
}
ListAirlinesResponse::ListAirlinesResponse(const ListAirlinesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListAirlinesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.airlines_){from._impl_.airlines_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.ListAirlinesResponse)
}

inline void ListAirlinesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.airlines_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListAirlinesResponse::~ListAirlinesResponse() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.ListAirlinesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListAirlinesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.airlines_.~RepeatedPtrField();
}

void ListAirlinesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListAirlinesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.ListAirlinesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.airlines_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAirlinesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .vasystem.api.v2.Airline airlines = 1 [json_name = "airlines"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_airlines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListAirlinesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.ListAirlinesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vasystem.api.v2.Airline airlines = 1 [json_name = "airlines"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_airlines_size()); i < n; i++) {
    const auto& repfield = this->_internal_airlines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.ListAirlinesResponse)
  return target;
}

size_t ListAirlinesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.ListAirlinesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vasystem.api.v2.Airline airlines = 1 [json_name = "airlines"];
  total_size += 1UL * this->_internal_airlines_size();
  for (const auto& msg : this->_impl_.airlines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListAirlinesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListAirlinesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListAirlinesResponse::GetClassData() const { return &_class_data_; }


void ListAirlinesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListAirlinesResponse*>(&to_msg);
  auto& from = static_cast<const ListAirlinesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.ListAirlinesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.airlines_.MergeFrom(from._impl_.airlines_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListAirlinesResponse::CopyFrom(const ListAirlinesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.ListAirlinesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAirlinesResponse::IsInitialized() const {
  return true;
}

void ListAirlinesResponse::InternalSwap(ListAirlinesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.airlines_.InternalSwap(&other->_impl_.airlines_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAirlinesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fairlines_2eproto[1]);
}

// ===================================================================

class Airline::_Internal {
 public:
};

Airline::Airline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.Airline)
}
Airline::Airline(const Airline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Airline* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.icao_code_){}
    , decltype(_impl_.iata_code_){}
    , decltype(_impl_.display_icao_code_){}
    , decltype(_impl_.display_iata_code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icao_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icao_code().empty()) {
    _this->_impl_.icao_code_.Set(from._internal_icao_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iata_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iata_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iata_code().empty()) {
    _this->_impl_.iata_code_.Set(from._internal_iata_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_icao_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_icao_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_icao_code().empty()) {
    _this->_impl_.display_icao_code_.Set(from._internal_display_icao_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_iata_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_iata_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_iata_code().empty()) {
    _this->_impl_.display_iata_code_.Set(from._internal_display_iata_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.Airline)
}

inline void Airline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.icao_code_){}
    , decltype(_impl_.iata_code_){}
    , decltype(_impl_.display_icao_code_){}
    , decltype(_impl_.display_iata_code_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icao_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iata_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iata_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_icao_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_icao_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_iata_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_iata_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Airline::~Airline() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.Airline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Airline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.icao_code_.Destroy();
  _impl_.iata_code_.Destroy();
  _impl_.display_icao_code_.Destroy();
  _impl_.display_iata_code_.Destroy();
  _impl_.name_.Destroy();
}

void Airline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Airline::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.Airline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.icao_code_.ClearToEmpty();
  _impl_.iata_code_.ClearToEmpty();
  _impl_.display_icao_code_.ClearToEmpty();
  _impl_.display_iata_code_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Airline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.id"));
        } else
          goto handle_unusual;
        continue;
      // string icao_code = 2 [json_name = "icaoCode"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icao_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.icao_code"));
        } else
          goto handle_unusual;
        continue;
      // string iata_code = 3 [json_name = "iataCode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_iata_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.iata_code"));
        } else
          goto handle_unusual;
        continue;
      // string display_icao_code = 4 [json_name = "displayIcaoCode"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_icao_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.display_icao_code"));
        } else
          goto handle_unusual;
        continue;
      // string display_iata_code = 5 [json_name = "displayIataCode"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_display_iata_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.display_iata_code"));
        } else
          goto handle_unusual;
        continue;
      // string name = 6 [json_name = "name"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Airline.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Airline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.Airline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string icao_code = 2 [json_name = "icaoCode"];
  if (!this->_internal_icao_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_code().data(), static_cast<int>(this->_internal_icao_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.icao_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_icao_code(), target);
  }

  // string iata_code = 3 [json_name = "iataCode"];
  if (!this->_internal_iata_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iata_code().data(), static_cast<int>(this->_internal_iata_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.iata_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_iata_code(), target);
  }

  // string display_icao_code = 4 [json_name = "displayIcaoCode"];
  if (!this->_internal_display_icao_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_icao_code().data(), static_cast<int>(this->_internal_display_icao_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.display_icao_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_icao_code(), target);
  }

  // string display_iata_code = 5 [json_name = "displayIataCode"];
  if (!this->_internal_display_iata_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_iata_code().data(), static_cast<int>(this->_internal_display_iata_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.display_iata_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_display_iata_code(), target);
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Airline.name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.Airline)
  return target;
}

size_t Airline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.Airline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string icao_code = 2 [json_name = "icaoCode"];
  if (!this->_internal_icao_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_code());
  }

  // string iata_code = 3 [json_name = "iataCode"];
  if (!this->_internal_iata_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iata_code());
  }

  // string display_icao_code = 4 [json_name = "displayIcaoCode"];
  if (!this->_internal_display_icao_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_icao_code());
  }

  // string display_iata_code = 5 [json_name = "displayIataCode"];
  if (!this->_internal_display_iata_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_iata_code());
  }

  // string name = 6 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Airline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Airline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Airline::GetClassData() const { return &_class_data_; }


void Airline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Airline*>(&to_msg);
  auto& from = static_cast<const Airline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.Airline)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_icao_code().empty()) {
    _this->_internal_set_icao_code(from._internal_icao_code());
  }
  if (!from._internal_iata_code().empty()) {
    _this->_internal_set_iata_code(from._internal_iata_code());
  }
  if (!from._internal_display_icao_code().empty()) {
    _this->_internal_set_display_icao_code(from._internal_display_icao_code());
  }
  if (!from._internal_display_iata_code().empty()) {
    _this->_internal_set_display_iata_code(from._internal_display_iata_code());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Airline::CopyFrom(const Airline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.Airline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Airline::IsInitialized() const {
  return true;
}

void Airline::InternalSwap(Airline* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icao_code_, lhs_arena,
      &other->_impl_.icao_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iata_code_, lhs_arena,
      &other->_impl_.iata_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_icao_code_, lhs_arena,
      &other->_impl_.display_icao_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_iata_code_, lhs_arena,
      &other->_impl_.display_iata_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Airline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fairlines_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::ListAirlinesRequest*
Arena::CreateMaybeMessage< ::vasystem::api::v2::ListAirlinesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::ListAirlinesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::ListAirlinesResponse*
Arena::CreateMaybeMessage< ::vasystem::api::v2::ListAirlinesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::ListAirlinesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::Airline*
Arena::CreateMaybeMessage< ::vasystem::api::v2::Airline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::Airline >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
