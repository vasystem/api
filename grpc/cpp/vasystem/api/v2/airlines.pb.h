// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/airlines.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fairlines_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fairlines_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vasystem_2fapi_2fv2_2fairlines_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto;
namespace vasystem {
namespace api {
namespace v2 {
class Airline;
struct AirlineDefaultTypeInternal;
extern AirlineDefaultTypeInternal _Airline_default_instance_;
class ListAirlinesRequest;
struct ListAirlinesRequestDefaultTypeInternal;
extern ListAirlinesRequestDefaultTypeInternal _ListAirlinesRequest_default_instance_;
class ListAirlinesResponse;
struct ListAirlinesResponseDefaultTypeInternal;
extern ListAirlinesResponseDefaultTypeInternal _ListAirlinesResponse_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> ::vasystem::api::v2::Airline* Arena::CreateMaybeMessage<::vasystem::api::v2::Airline>(Arena*);
template<> ::vasystem::api::v2::ListAirlinesRequest* Arena::CreateMaybeMessage<::vasystem::api::v2::ListAirlinesRequest>(Arena*);
template<> ::vasystem::api::v2::ListAirlinesResponse* Arena::CreateMaybeMessage<::vasystem::api::v2::ListAirlinesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class ListAirlinesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:vasystem.api.v2.ListAirlinesRequest) */ {
 public:
  inline ListAirlinesRequest() : ListAirlinesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListAirlinesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAirlinesRequest(const ListAirlinesRequest& from);
  ListAirlinesRequest(ListAirlinesRequest&& from) noexcept
    : ListAirlinesRequest() {
    *this = ::std::move(from);
  }

  inline ListAirlinesRequest& operator=(const ListAirlinesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAirlinesRequest& operator=(ListAirlinesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAirlinesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAirlinesRequest* internal_default_instance() {
    return reinterpret_cast<const ListAirlinesRequest*>(
               &_ListAirlinesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListAirlinesRequest& a, ListAirlinesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAirlinesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAirlinesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAirlinesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAirlinesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListAirlinesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListAirlinesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.ListAirlinesRequest";
  }
  protected:
  explicit ListAirlinesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.ListAirlinesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto;
};
// -------------------------------------------------------------------

class ListAirlinesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.ListAirlinesResponse) */ {
 public:
  inline ListAirlinesResponse() : ListAirlinesResponse(nullptr) {}
  ~ListAirlinesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListAirlinesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListAirlinesResponse(const ListAirlinesResponse& from);
  ListAirlinesResponse(ListAirlinesResponse&& from) noexcept
    : ListAirlinesResponse() {
    *this = ::std::move(from);
  }

  inline ListAirlinesResponse& operator=(const ListAirlinesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAirlinesResponse& operator=(ListAirlinesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListAirlinesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListAirlinesResponse* internal_default_instance() {
    return reinterpret_cast<const ListAirlinesResponse*>(
               &_ListAirlinesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListAirlinesResponse& a, ListAirlinesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAirlinesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAirlinesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListAirlinesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListAirlinesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListAirlinesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListAirlinesResponse& from) {
    ListAirlinesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAirlinesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.ListAirlinesResponse";
  }
  protected:
  explicit ListAirlinesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirlinesFieldNumber = 1,
  };
  // repeated .vasystem.api.v2.Airline airlines = 1 [json_name = "airlines"];
  int airlines_size() const;
  private:
  int _internal_airlines_size() const;
  public:
  void clear_airlines();
  ::vasystem::api::v2::Airline* mutable_airlines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Airline >*
      mutable_airlines();
  private:
  const ::vasystem::api::v2::Airline& _internal_airlines(int index) const;
  ::vasystem::api::v2::Airline* _internal_add_airlines();
  public:
  const ::vasystem::api::v2::Airline& airlines(int index) const;
  ::vasystem::api::v2::Airline* add_airlines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Airline >&
      airlines() const;

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.ListAirlinesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Airline > airlines_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto;
};
// -------------------------------------------------------------------

class Airline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.Airline) */ {
 public:
  inline Airline() : Airline(nullptr) {}
  ~Airline() override;
  explicit PROTOBUF_CONSTEXPR Airline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Airline(const Airline& from);
  Airline(Airline&& from) noexcept
    : Airline() {
    *this = ::std::move(from);
  }

  inline Airline& operator=(const Airline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Airline& operator=(Airline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Airline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Airline* internal_default_instance() {
    return reinterpret_cast<const Airline*>(
               &_Airline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Airline& a, Airline& b) {
    a.Swap(&b);
  }
  inline void Swap(Airline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Airline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Airline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Airline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Airline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Airline& from) {
    Airline::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Airline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.Airline";
  }
  protected:
  explicit Airline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIcaoCodeFieldNumber = 2,
    kIataCodeFieldNumber = 3,
    kDisplayIcaoCodeFieldNumber = 4,
    kDisplayIataCodeFieldNumber = 5,
    kNameFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string icao_code = 2 [json_name = "icaoCode"];
  void clear_icao_code();
  const std::string& icao_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icao_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icao_code();
  PROTOBUF_NODISCARD std::string* release_icao_code();
  void set_allocated_icao_code(std::string* icao_code);
  private:
  const std::string& _internal_icao_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icao_code(const std::string& value);
  std::string* _internal_mutable_icao_code();
  public:

  // string iata_code = 3 [json_name = "iataCode"];
  void clear_iata_code();
  const std::string& iata_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iata_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iata_code();
  PROTOBUF_NODISCARD std::string* release_iata_code();
  void set_allocated_iata_code(std::string* iata_code);
  private:
  const std::string& _internal_iata_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iata_code(const std::string& value);
  std::string* _internal_mutable_iata_code();
  public:

  // string display_icao_code = 4 [json_name = "displayIcaoCode"];
  void clear_display_icao_code();
  const std::string& display_icao_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_icao_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_icao_code();
  PROTOBUF_NODISCARD std::string* release_display_icao_code();
  void set_allocated_display_icao_code(std::string* display_icao_code);
  private:
  const std::string& _internal_display_icao_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_icao_code(const std::string& value);
  std::string* _internal_mutable_display_icao_code();
  public:

  // string display_iata_code = 5 [json_name = "displayIataCode"];
  void clear_display_iata_code();
  const std::string& display_iata_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_iata_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_iata_code();
  PROTOBUF_NODISCARD std::string* release_display_iata_code();
  void set_allocated_display_iata_code(std::string* display_iata_code);
  private:
  const std::string& _internal_display_iata_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_iata_code(const std::string& value);
  std::string* _internal_mutable_display_iata_code();
  public:

  // string name = 6 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.Airline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icao_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iata_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_icao_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_iata_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fairlines_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListAirlinesRequest

// -------------------------------------------------------------------

// ListAirlinesResponse

// repeated .vasystem.api.v2.Airline airlines = 1 [json_name = "airlines"];
inline int ListAirlinesResponse::_internal_airlines_size() const {
  return _impl_.airlines_.size();
}
inline int ListAirlinesResponse::airlines_size() const {
  return _internal_airlines_size();
}
inline void ListAirlinesResponse::clear_airlines() {
  _impl_.airlines_.Clear();
}
inline ::vasystem::api::v2::Airline* ListAirlinesResponse::mutable_airlines(int index) {
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListAirlinesResponse.airlines)
  return _impl_.airlines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Airline >*
ListAirlinesResponse::mutable_airlines() {
  // @@protoc_insertion_point(field_mutable_list:vasystem.api.v2.ListAirlinesResponse.airlines)
  return &_impl_.airlines_;
}
inline const ::vasystem::api::v2::Airline& ListAirlinesResponse::_internal_airlines(int index) const {
  return _impl_.airlines_.Get(index);
}
inline const ::vasystem::api::v2::Airline& ListAirlinesResponse::airlines(int index) const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListAirlinesResponse.airlines)
  return _internal_airlines(index);
}
inline ::vasystem::api::v2::Airline* ListAirlinesResponse::_internal_add_airlines() {
  return _impl_.airlines_.Add();
}
inline ::vasystem::api::v2::Airline* ListAirlinesResponse::add_airlines() {
  ::vasystem::api::v2::Airline* _add = _internal_add_airlines();
  // @@protoc_insertion_point(field_add:vasystem.api.v2.ListAirlinesResponse.airlines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Airline >&
ListAirlinesResponse::airlines() const {
  // @@protoc_insertion_point(field_list:vasystem.api.v2.ListAirlinesResponse.airlines)
  return _impl_.airlines_;
}

// -------------------------------------------------------------------

// Airline

// string id = 1 [json_name = "id"];
inline void Airline::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Airline::id() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.id)
}
inline std::string* Airline::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.id)
  return _s;
}
inline const std::string& Airline::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Airline::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_id() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.id)
  return _impl_.id_.Release();
}
inline void Airline::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.id)
}

// string icao_code = 2 [json_name = "icaoCode"];
inline void Airline::clear_icao_code() {
  _impl_.icao_code_.ClearToEmpty();
}
inline const std::string& Airline::icao_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.icao_code)
  return _internal_icao_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_icao_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icao_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.icao_code)
}
inline std::string* Airline::mutable_icao_code() {
  std::string* _s = _internal_mutable_icao_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.icao_code)
  return _s;
}
inline const std::string& Airline::_internal_icao_code() const {
  return _impl_.icao_code_.Get();
}
inline void Airline::_internal_set_icao_code(const std::string& value) {
  
  _impl_.icao_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_icao_code() {
  
  return _impl_.icao_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_icao_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.icao_code)
  return _impl_.icao_code_.Release();
}
inline void Airline::set_allocated_icao_code(std::string* icao_code) {
  if (icao_code != nullptr) {
    
  } else {
    
  }
  _impl_.icao_code_.SetAllocated(icao_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icao_code_.IsDefault()) {
    _impl_.icao_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.icao_code)
}

// string iata_code = 3 [json_name = "iataCode"];
inline void Airline::clear_iata_code() {
  _impl_.iata_code_.ClearToEmpty();
}
inline const std::string& Airline::iata_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.iata_code)
  return _internal_iata_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_iata_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iata_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.iata_code)
}
inline std::string* Airline::mutable_iata_code() {
  std::string* _s = _internal_mutable_iata_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.iata_code)
  return _s;
}
inline const std::string& Airline::_internal_iata_code() const {
  return _impl_.iata_code_.Get();
}
inline void Airline::_internal_set_iata_code(const std::string& value) {
  
  _impl_.iata_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_iata_code() {
  
  return _impl_.iata_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_iata_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.iata_code)
  return _impl_.iata_code_.Release();
}
inline void Airline::set_allocated_iata_code(std::string* iata_code) {
  if (iata_code != nullptr) {
    
  } else {
    
  }
  _impl_.iata_code_.SetAllocated(iata_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iata_code_.IsDefault()) {
    _impl_.iata_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.iata_code)
}

// string display_icao_code = 4 [json_name = "displayIcaoCode"];
inline void Airline::clear_display_icao_code() {
  _impl_.display_icao_code_.ClearToEmpty();
}
inline const std::string& Airline::display_icao_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.display_icao_code)
  return _internal_display_icao_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_display_icao_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_icao_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.display_icao_code)
}
inline std::string* Airline::mutable_display_icao_code() {
  std::string* _s = _internal_mutable_display_icao_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.display_icao_code)
  return _s;
}
inline const std::string& Airline::_internal_display_icao_code() const {
  return _impl_.display_icao_code_.Get();
}
inline void Airline::_internal_set_display_icao_code(const std::string& value) {
  
  _impl_.display_icao_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_display_icao_code() {
  
  return _impl_.display_icao_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_display_icao_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.display_icao_code)
  return _impl_.display_icao_code_.Release();
}
inline void Airline::set_allocated_display_icao_code(std::string* display_icao_code) {
  if (display_icao_code != nullptr) {
    
  } else {
    
  }
  _impl_.display_icao_code_.SetAllocated(display_icao_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_icao_code_.IsDefault()) {
    _impl_.display_icao_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.display_icao_code)
}

// string display_iata_code = 5 [json_name = "displayIataCode"];
inline void Airline::clear_display_iata_code() {
  _impl_.display_iata_code_.ClearToEmpty();
}
inline const std::string& Airline::display_iata_code() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.display_iata_code)
  return _internal_display_iata_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_display_iata_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_iata_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.display_iata_code)
}
inline std::string* Airline::mutable_display_iata_code() {
  std::string* _s = _internal_mutable_display_iata_code();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.display_iata_code)
  return _s;
}
inline const std::string& Airline::_internal_display_iata_code() const {
  return _impl_.display_iata_code_.Get();
}
inline void Airline::_internal_set_display_iata_code(const std::string& value) {
  
  _impl_.display_iata_code_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_display_iata_code() {
  
  return _impl_.display_iata_code_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_display_iata_code() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.display_iata_code)
  return _impl_.display_iata_code_.Release();
}
inline void Airline::set_allocated_display_iata_code(std::string* display_iata_code) {
  if (display_iata_code != nullptr) {
    
  } else {
    
  }
  _impl_.display_iata_code_.SetAllocated(display_iata_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_iata_code_.IsDefault()) {
    _impl_.display_iata_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.display_iata_code)
}

// string name = 6 [json_name = "name"];
inline void Airline::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Airline::name() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Airline.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Airline::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Airline.name)
}
inline std::string* Airline::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Airline.name)
  return _s;
}
inline const std::string& Airline::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Airline::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Airline::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Airline::release_name() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Airline.name)
  return _impl_.name_.Release();
}
inline void Airline::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Airline.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace vasystem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fairlines_2eproto
