// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/routes.proto

#include "vasystem/api/v2/routes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vasystem {
namespace api {
namespace v2 {
PROTOBUF_CONSTEXPR ListRoutesRequest::ListRoutesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.airline_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.departure_icao_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arrival_icao_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icao_flight_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.page_size_)*/uint64_t{0u}
  , /*decltype(_impl_.include_archived_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRoutesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRoutesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRoutesRequestDefaultTypeInternal() {}
  union {
    ListRoutesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRoutesRequestDefaultTypeInternal _ListRoutesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListRoutesResponse::ListRoutesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_)*/{}
  , /*decltype(_impl_.next_page_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListRoutesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRoutesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRoutesResponseDefaultTypeInternal() {}
  union {
    ListRoutesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRoutesResponseDefaultTypeInternal _ListRoutesResponse_default_instance_;
PROTOBUF_CONSTEXPR Route::Route(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.days_flown_)*/{}
  , /*decltype(_impl_._days_flown_cached_byte_size_)*/{0}
  , /*decltype(_impl_.aircraft_models_)*/{}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.icao_flight_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.airline_)*/nullptr
  , /*decltype(_impl_.departure_)*/nullptr
  , /*decltype(_impl_.arrival_)*/nullptr
  , /*decltype(_impl_.departure_time_)*/nullptr
  , /*decltype(_impl_.arrival_time_)*/nullptr
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.archived_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
static ::_pb::Metadata file_level_metadata_vasystem_2fapi_2fv2_2froutes_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_vasystem_2fapi_2fv2_2froutes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vasystem_2fapi_2fv2_2froutes_2eproto = nullptr;

const uint32_t TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.airline_id_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.departure_icao_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.arrival_icao_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.icao_flight_number_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.include_archived_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.page_size_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesRequest, _impl_.page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesResponse, _impl_.routes_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::ListRoutesResponse, _impl_.next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.airline_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.icao_flight_number_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.departure_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.arrival_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.departure_time_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.arrival_time_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.days_flown_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.aircraft_models_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::Route, _impl_.archived_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vasystem::api::v2::ListRoutesRequest)},
  { 13, -1, -1, sizeof(::vasystem::api::v2::ListRoutesResponse)},
  { 21, -1, -1, sizeof(::vasystem::api::v2::Route)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vasystem::api::v2::_ListRoutesRequest_default_instance_._instance,
  &::vasystem::api::v2::_ListRoutesResponse_default_instance_._instance,
  &::vasystem::api::v2::_Route_default_instance_._instance,
};

const char descriptor_table_protodef_vasystem_2fapi_2fv2_2froutes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034vasystem/api/v2/routes.proto\022\017vasystem"
  ".api.v2\032\036google/protobuf/duration.proto\032"
  "\036vasystem/api/v2/aircraft.proto\032\036vasyste"
  "m/api/v2/airlines.proto\032\036vasystem/api/v2"
  "/airports.proto\032\037vasystem/api/v2/dayofwe"
  "ek.proto\032\037vasystem/api/v2/timeofday.prot"
  "o\"\221\002\n\021ListRoutesRequest\022\035\n\nairline_id\030\001 "
  "\001(\tR\tairlineId\022%\n\016departure_icao\030\002 \001(\tR\r"
  "departureIcao\022!\n\014arrival_icao\030\003 \001(\tR\013arr"
  "ivalIcao\022,\n\022icao_flight_number\030\004 \001(\tR\020ic"
  "aoFlightNumber\022)\n\020include_archived\030\005 \001(\010"
  "R\017includeArchived\022\033\n\tpage_size\030\016 \001(\004R\010pa"
  "geSize\022\035\n\npage_token\030\017 \001(\tR\tpageToken\"l\n"
  "\022ListRoutesResponse\022.\n\006routes\030\001 \003(\0132\026.va"
  "system.api.v2.RouteR\006routes\022&\n\017next_page"
  "_token\030\002 \001(\tR\rnextPageToken\"\276\004\n\005Route\022\016\n"
  "\002id\030\001 \001(\tR\002id\0222\n\007airline\030\002 \001(\0132\030.vasyste"
  "m.api.v2.AirlineR\007airline\022,\n\022icao_flight"
  "_number\030\003 \001(\tR\020icaoFlightNumber\0226\n\tdepar"
  "ture\030\005 \001(\0132\030.vasystem.api.v2.AirportR\tde"
  "parture\0222\n\007arrival\030\006 \001(\0132\030.vasystem.api."
  "v2.AirportR\007arrival\022A\n\016departure_time\030\007 "
  "\001(\0132\032.vasystem.api.v2.TimeOfDayR\rdepartu"
  "reTime\022=\n\014arrival_time\030\010 \001(\0132\032.vasystem."
  "api.v2.TimeOfDayR\013arrivalTime\0225\n\010duratio"
  "n\030\t \001(\0132\031.google.protobuf.DurationR\010dura"
  "tion\0229\n\ndays_flown\030\n \003(\0162\032.vasystem.api."
  "v2.DayOfWeekR\tdaysFlown\022G\n\017aircraft_mode"
  "ls\030\013 \003(\0132\036.vasystem.api.v2.AircraftModel"
  "R\016aircraftModels\022\032\n\010archived\030\020 \001(\010R\010arch"
  "ived2h\n\rRoutesService\022W\n\nListRoutes\022\".va"
  "system.api.v2.ListRoutesRequest\032#.vasyst"
  "em.api.v2.ListRoutesResponse\"\000B\267\001\n\023dev.v"
  "asystem.api.v2B\013RoutesProtoP\001Z5github.co"
  "m/vasystem/api/grpc/go/vasystem/api/v2;a"
  "piv2\242\002\003VAX\252\002\017Vasystem.Api.V2\312\002\017Vasystem\\"
  "Api\\V2\342\002\033Vasystem\\Api\\V2\\GPBMetadata\352\002\021V"
  "asystem::Api::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_deps[6] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_vasystem_2fapi_2fv2_2faircraft_2eproto,
  &::descriptor_table_vasystem_2fapi_2fv2_2fairlines_2eproto,
  &::descriptor_table_vasystem_2fapi_2fv2_2fairports_2eproto,
  &::descriptor_table_vasystem_2fapi_2fv2_2fdayofweek_2eproto,
  &::descriptor_table_vasystem_2fapi_2fv2_2ftimeofday_2eproto,
};
static ::_pbi::once_flag descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto = {
    false, false, 1504, descriptor_table_protodef_vasystem_2fapi_2fv2_2froutes_2eproto,
    "vasystem/api/v2/routes.proto",
    &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_once, descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_deps, 6, 3,
    schemas, file_default_instances, TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto::offsets,
    file_level_metadata_vasystem_2fapi_2fv2_2froutes_2eproto, file_level_enum_descriptors_vasystem_2fapi_2fv2_2froutes_2eproto,
    file_level_service_descriptors_vasystem_2fapi_2fv2_2froutes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_getter() {
  return &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vasystem_2fapi_2fv2_2froutes_2eproto(&descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto);
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class ListRoutesRequest::_Internal {
 public:
};

ListRoutesRequest::ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.ListRoutesRequest)
}
ListRoutesRequest::ListRoutesRequest(const ListRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRoutesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.airline_id_){}
    , decltype(_impl_.departure_icao_){}
    , decltype(_impl_.arrival_icao_){}
    , decltype(_impl_.icao_flight_number_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){}
    , decltype(_impl_.include_archived_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.airline_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.airline_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_airline_id().empty()) {
    _this->_impl_.airline_id_.Set(from._internal_airline_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.departure_icao_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departure_icao_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_departure_icao().empty()) {
    _this->_impl_.departure_icao_.Set(from._internal_departure_icao(), 
      _this->GetArenaForAllocation());
  }
  _impl_.arrival_icao_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arrival_icao_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_arrival_icao().empty()) {
    _this->_impl_.arrival_icao_.Set(from._internal_arrival_icao(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icao_flight_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icao_flight_number().empty()) {
    _this->_impl_.icao_flight_number_.Set(from._internal_icao_flight_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.page_size_, &from._impl_.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.include_archived_) -
    reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.include_archived_));
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.ListRoutesRequest)
}

inline void ListRoutesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.airline_id_){}
    , decltype(_impl_.departure_icao_){}
    , decltype(_impl_.arrival_icao_){}
    , decltype(_impl_.icao_flight_number_){}
    , decltype(_impl_.page_token_){}
    , decltype(_impl_.page_size_){uint64_t{0u}}
    , decltype(_impl_.include_archived_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.airline_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.airline_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.departure_icao_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.departure_icao_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.arrival_icao_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.arrival_icao_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icao_flight_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListRoutesRequest::~ListRoutesRequest() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.ListRoutesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRoutesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.airline_id_.Destroy();
  _impl_.departure_icao_.Destroy();
  _impl_.arrival_icao_.Destroy();
  _impl_.icao_flight_number_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListRoutesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.ListRoutesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.airline_id_.ClearToEmpty();
  _impl_.departure_icao_.ClearToEmpty();
  _impl_.arrival_icao_.ClearToEmpty();
  _impl_.icao_flight_number_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  ::memset(&_impl_.page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.include_archived_) -
      reinterpret_cast<char*>(&_impl_.page_size_)) + sizeof(_impl_.include_archived_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRoutesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string airline_id = 1 [json_name = "airlineId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_airline_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesRequest.airline_id"));
        } else
          goto handle_unusual;
        continue;
      // string departure_icao = 2 [json_name = "departureIcao"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_departure_icao();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesRequest.departure_icao"));
        } else
          goto handle_unusual;
        continue;
      // string arrival_icao = 3 [json_name = "arrivalIcao"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_arrival_icao();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesRequest.arrival_icao"));
        } else
          goto handle_unusual;
        continue;
      // string icao_flight_number = 4 [json_name = "icaoFlightNumber"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_icao_flight_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesRequest.icao_flight_number"));
        } else
          goto handle_unusual;
        continue;
      // bool include_archived = 5 [json_name = "includeArchived"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.include_archived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 page_size = 14 [json_name = "pageSize"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 15 [json_name = "pageToken"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesRequest.page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRoutesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.ListRoutesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string airline_id = 1 [json_name = "airlineId"];
  if (!this->_internal_airline_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_airline_id().data(), static_cast<int>(this->_internal_airline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesRequest.airline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_airline_id(), target);
  }

  // string departure_icao = 2 [json_name = "departureIcao"];
  if (!this->_internal_departure_icao().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_departure_icao().data(), static_cast<int>(this->_internal_departure_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesRequest.departure_icao");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_departure_icao(), target);
  }

  // string arrival_icao = 3 [json_name = "arrivalIcao"];
  if (!this->_internal_arrival_icao().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arrival_icao().data(), static_cast<int>(this->_internal_arrival_icao().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesRequest.arrival_icao");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_arrival_icao(), target);
  }

  // string icao_flight_number = 4 [json_name = "icaoFlightNumber"];
  if (!this->_internal_icao_flight_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_flight_number().data(), static_cast<int>(this->_internal_icao_flight_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesRequest.icao_flight_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_icao_flight_number(), target);
  }

  // bool include_archived = 5 [json_name = "includeArchived"];
  if (this->_internal_include_archived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_include_archived(), target);
  }

  // uint64 page_size = 14 [json_name = "pageSize"];
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_page_size(), target);
  }

  // string page_token = 15 [json_name = "pageToken"];
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.ListRoutesRequest)
  return target;
}

size_t ListRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.ListRoutesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string airline_id = 1 [json_name = "airlineId"];
  if (!this->_internal_airline_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_airline_id());
  }

  // string departure_icao = 2 [json_name = "departureIcao"];
  if (!this->_internal_departure_icao().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_departure_icao());
  }

  // string arrival_icao = 3 [json_name = "arrivalIcao"];
  if (!this->_internal_arrival_icao().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arrival_icao());
  }

  // string icao_flight_number = 4 [json_name = "icaoFlightNumber"];
  if (!this->_internal_icao_flight_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_flight_number());
  }

  // string page_token = 15 [json_name = "pageToken"];
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // uint64 page_size = 14 [json_name = "pageSize"];
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_page_size());
  }

  // bool include_archived = 5 [json_name = "includeArchived"];
  if (this->_internal_include_archived() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRoutesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRoutesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRoutesRequest::GetClassData() const { return &_class_data_; }


void ListRoutesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRoutesRequest*>(&to_msg);
  auto& from = static_cast<const ListRoutesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.ListRoutesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_airline_id().empty()) {
    _this->_internal_set_airline_id(from._internal_airline_id());
  }
  if (!from._internal_departure_icao().empty()) {
    _this->_internal_set_departure_icao(from._internal_departure_icao());
  }
  if (!from._internal_arrival_icao().empty()) {
    _this->_internal_set_arrival_icao(from._internal_arrival_icao());
  }
  if (!from._internal_icao_flight_number().empty()) {
    _this->_internal_set_icao_flight_number(from._internal_icao_flight_number());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_include_archived() != 0) {
    _this->_internal_set_include_archived(from._internal_include_archived());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRoutesRequest::CopyFrom(const ListRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.ListRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoutesRequest::IsInitialized() const {
  return true;
}

void ListRoutesRequest::InternalSwap(ListRoutesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.airline_id_, lhs_arena,
      &other->_impl_.airline_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.departure_icao_, lhs_arena,
      &other->_impl_.departure_icao_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.arrival_icao_, lhs_arena,
      &other->_impl_.arrival_icao_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icao_flight_number_, lhs_arena,
      &other->_impl_.icao_flight_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.page_token_, lhs_arena,
      &other->_impl_.page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListRoutesRequest, _impl_.include_archived_)
      + sizeof(ListRoutesRequest::_impl_.include_archived_)
      - PROTOBUF_FIELD_OFFSET(ListRoutesRequest, _impl_.page_size_)>(
          reinterpret_cast<char*>(&_impl_.page_size_),
          reinterpret_cast<char*>(&other->_impl_.page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoutesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2froutes_2eproto[0]);
}

// ===================================================================

class ListRoutesResponse::_Internal {
 public:
};

ListRoutesResponse::ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.ListRoutesResponse)
}
ListRoutesResponse::ListRoutesResponse(const ListRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListRoutesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){from._impl_.routes_}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.ListRoutesResponse)
}

inline void ListRoutesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_){arena}
    , decltype(_impl_.next_page_token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListRoutesResponse::~ListRoutesResponse() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.ListRoutesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRoutesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_.~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListRoutesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.ListRoutesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_.Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListRoutesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .vasystem.api.v2.Route routes = 1 [json_name = "routes"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2 [json_name = "nextPageToken"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.ListRoutesResponse.next_page_token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRoutesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.ListRoutesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vasystem.api.v2.Route routes = 1 [json_name = "routes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string next_page_token = 2 [json_name = "nextPageToken"];
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.ListRoutesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.ListRoutesResponse)
  return target;
}

size_t ListRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.ListRoutesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vasystem.api.v2.Route routes = 1 [json_name = "routes"];
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->_impl_.routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2 [json_name = "nextPageToken"];
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListRoutesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListRoutesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListRoutesResponse::GetClassData() const { return &_class_data_; }


void ListRoutesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListRoutesResponse*>(&to_msg);
  auto& from = static_cast<const ListRoutesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.ListRoutesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_.MergeFrom(from._impl_.routes_);
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListRoutesResponse::CopyFrom(const ListRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.ListRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoutesResponse::IsInitialized() const {
  return true;
}

void ListRoutesResponse::InternalSwap(ListRoutesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.next_page_token_, lhs_arena,
      &other->_impl_.next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListRoutesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2froutes_2eproto[1]);
}

// ===================================================================

class Route::_Internal {
 public:
  static const ::vasystem::api::v2::Airline& airline(const Route* msg);
  static const ::vasystem::api::v2::Airport& departure(const Route* msg);
  static const ::vasystem::api::v2::Airport& arrival(const Route* msg);
  static const ::vasystem::api::v2::TimeOfDay& departure_time(const Route* msg);
  static const ::vasystem::api::v2::TimeOfDay& arrival_time(const Route* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const Route* msg);
};

const ::vasystem::api::v2::Airline&
Route::_Internal::airline(const Route* msg) {
  return *msg->_impl_.airline_;
}
const ::vasystem::api::v2::Airport&
Route::_Internal::departure(const Route* msg) {
  return *msg->_impl_.departure_;
}
const ::vasystem::api::v2::Airport&
Route::_Internal::arrival(const Route* msg) {
  return *msg->_impl_.arrival_;
}
const ::vasystem::api::v2::TimeOfDay&
Route::_Internal::departure_time(const Route* msg) {
  return *msg->_impl_.departure_time_;
}
const ::vasystem::api::v2::TimeOfDay&
Route::_Internal::arrival_time(const Route* msg) {
  return *msg->_impl_.arrival_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
Route::_Internal::duration(const Route* msg) {
  return *msg->_impl_.duration_;
}
void Route::clear_airline() {
  if (GetArenaForAllocation() == nullptr && _impl_.airline_ != nullptr) {
    delete _impl_.airline_;
  }
  _impl_.airline_ = nullptr;
}
void Route::clear_departure() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
}
void Route::clear_arrival() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_ != nullptr) {
    delete _impl_.arrival_;
  }
  _impl_.arrival_ = nullptr;
}
void Route::clear_departure_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
}
void Route::clear_arrival_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
}
void Route::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
void Route::clear_aircraft_models() {
  _impl_.aircraft_models_.Clear();
}
Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Route* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.days_flown_){from._impl_.days_flown_}
    , /*decltype(_impl_._days_flown_cached_byte_size_)*/{0}
    , decltype(_impl_.aircraft_models_){from._impl_.aircraft_models_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.icao_flight_number_){}
    , decltype(_impl_.airline_){nullptr}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.archived_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.icao_flight_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icao_flight_number().empty()) {
    _this->_impl_.icao_flight_number_.Set(from._internal_icao_flight_number(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_airline()) {
    _this->_impl_.airline_ = new ::vasystem::api::v2::Airline(*from._impl_.airline_);
  }
  if (from._internal_has_departure()) {
    _this->_impl_.departure_ = new ::vasystem::api::v2::Airport(*from._impl_.departure_);
  }
  if (from._internal_has_arrival()) {
    _this->_impl_.arrival_ = new ::vasystem::api::v2::Airport(*from._impl_.arrival_);
  }
  if (from._internal_has_departure_time()) {
    _this->_impl_.departure_time_ = new ::vasystem::api::v2::TimeOfDay(*from._impl_.departure_time_);
  }
  if (from._internal_has_arrival_time()) {
    _this->_impl_.arrival_time_ = new ::vasystem::api::v2::TimeOfDay(*from._impl_.arrival_time_);
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  _this->_impl_.archived_ = from._impl_.archived_;
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.Route)
}

inline void Route::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.days_flown_){arena}
    , /*decltype(_impl_._days_flown_cached_byte_size_)*/{0}
    , decltype(_impl_.aircraft_models_){arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.icao_flight_number_){}
    , decltype(_impl_.airline_){nullptr}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.departure_time_){nullptr}
    , decltype(_impl_.arrival_time_){nullptr}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.archived_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icao_flight_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.Route)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.days_flown_.~RepeatedField();
  _impl_.aircraft_models_.~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.icao_flight_number_.Destroy();
  if (this != internal_default_instance()) delete _impl_.airline_;
  if (this != internal_default_instance()) delete _impl_.departure_;
  if (this != internal_default_instance()) delete _impl_.arrival_;
  if (this != internal_default_instance()) delete _impl_.departure_time_;
  if (this != internal_default_instance()) delete _impl_.arrival_time_;
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void Route::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.days_flown_.Clear();
  _impl_.aircraft_models_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.icao_flight_number_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.airline_ != nullptr) {
    delete _impl_.airline_;
  }
  _impl_.airline_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_ != nullptr) {
    delete _impl_.arrival_;
  }
  _impl_.arrival_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.departure_time_ != nullptr) {
    delete _impl_.departure_time_;
  }
  _impl_.departure_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_time_ != nullptr) {
    delete _impl_.arrival_time_;
  }
  _impl_.arrival_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _impl_.archived_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Route.id"));
        } else
          goto handle_unusual;
        continue;
      // .vasystem.api.v2.Airline airline = 2 [json_name = "airline"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_airline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string icao_flight_number = 3 [json_name = "icaoFlightNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icao_flight_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.Route.icao_flight_number"));
        } else
          goto handle_unusual;
        continue;
      // .vasystem.api.v2.Airport departure = 5 [json_name = "departure"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vasystem.api.v2.Airport arrival = 6 [json_name = "arrival"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vasystem.api.v2.TimeOfDay departure_time = 7 [json_name = "departureTime"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vasystem.api.v2.TimeOfDay arrival_time = 8 [json_name = "arrivalTime"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 9 [json_name = "duration"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .vasystem.api.v2.DayOfWeek days_flown = 10 [json_name = "daysFlown"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_days_flown(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_days_flown(static_cast<::vasystem::api::v2::DayOfWeek>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .vasystem.api.v2.AircraftModel aircraft_models = 11 [json_name = "aircraftModels"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_aircraft_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool archived = 16 [json_name = "archived"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.archived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Route.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .vasystem.api.v2.Airline airline = 2 [json_name = "airline"];
  if (this->_internal_has_airline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::airline(this),
        _Internal::airline(this).GetCachedSize(), target, stream);
  }

  // string icao_flight_number = 3 [json_name = "icaoFlightNumber"];
  if (!this->_internal_icao_flight_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icao_flight_number().data(), static_cast<int>(this->_internal_icao_flight_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.Route.icao_flight_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icao_flight_number(), target);
  }

  // .vasystem.api.v2.Airport departure = 5 [json_name = "departure"];
  if (this->_internal_has_departure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::departure(this),
        _Internal::departure(this).GetCachedSize(), target, stream);
  }

  // .vasystem.api.v2.Airport arrival = 6 [json_name = "arrival"];
  if (this->_internal_has_arrival()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::arrival(this),
        _Internal::arrival(this).GetCachedSize(), target, stream);
  }

  // .vasystem.api.v2.TimeOfDay departure_time = 7 [json_name = "departureTime"];
  if (this->_internal_has_departure_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::departure_time(this),
        _Internal::departure_time(this).GetCachedSize(), target, stream);
  }

  // .vasystem.api.v2.TimeOfDay arrival_time = 8 [json_name = "arrivalTime"];
  if (this->_internal_has_arrival_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::arrival_time(this),
        _Internal::arrival_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration duration = 9 [json_name = "duration"];
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // repeated .vasystem.api.v2.DayOfWeek days_flown = 10 [json_name = "daysFlown"];
  {
    int byte_size = _impl_._days_flown_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          10, _impl_.days_flown_, byte_size, target);
    }
  }

  // repeated .vasystem.api.v2.AircraftModel aircraft_models = 11 [json_name = "aircraftModels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aircraft_models_size()); i < n; i++) {
    const auto& repfield = this->_internal_aircraft_models(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool archived = 16 [json_name = "archived"];
  if (this->_internal_archived() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_archived(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vasystem.api.v2.DayOfWeek days_flown = 10 [json_name = "daysFlown"];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_days_flown_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_days_flown(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._days_flown_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .vasystem.api.v2.AircraftModel aircraft_models = 11 [json_name = "aircraftModels"];
  total_size += 1UL * this->_internal_aircraft_models_size();
  for (const auto& msg : this->_impl_.aircraft_models_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string icao_flight_number = 3 [json_name = "icaoFlightNumber"];
  if (!this->_internal_icao_flight_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icao_flight_number());
  }

  // .vasystem.api.v2.Airline airline = 2 [json_name = "airline"];
  if (this->_internal_has_airline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.airline_);
  }

  // .vasystem.api.v2.Airport departure = 5 [json_name = "departure"];
  if (this->_internal_has_departure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_);
  }

  // .vasystem.api.v2.Airport arrival = 6 [json_name = "arrival"];
  if (this->_internal_has_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_);
  }

  // .vasystem.api.v2.TimeOfDay departure_time = 7 [json_name = "departureTime"];
  if (this->_internal_has_departure_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_time_);
  }

  // .vasystem.api.v2.TimeOfDay arrival_time = 8 [json_name = "arrivalTime"];
  if (this->_internal_has_arrival_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_time_);
  }

  // .google.protobuf.Duration duration = 9 [json_name = "duration"];
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // bool archived = 16 [json_name = "archived"];
  if (this->_internal_archived() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }


void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Route*>(&to_msg);
  auto& from = static_cast<const Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.Route)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.days_flown_.MergeFrom(from._impl_.days_flown_);
  _this->_impl_.aircraft_models_.MergeFrom(from._impl_.aircraft_models_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_icao_flight_number().empty()) {
    _this->_internal_set_icao_flight_number(from._internal_icao_flight_number());
  }
  if (from._internal_has_airline()) {
    _this->_internal_mutable_airline()->::vasystem::api::v2::Airline::MergeFrom(
        from._internal_airline());
  }
  if (from._internal_has_departure()) {
    _this->_internal_mutable_departure()->::vasystem::api::v2::Airport::MergeFrom(
        from._internal_departure());
  }
  if (from._internal_has_arrival()) {
    _this->_internal_mutable_arrival()->::vasystem::api::v2::Airport::MergeFrom(
        from._internal_arrival());
  }
  if (from._internal_has_departure_time()) {
    _this->_internal_mutable_departure_time()->::vasystem::api::v2::TimeOfDay::MergeFrom(
        from._internal_departure_time());
  }
  if (from._internal_has_arrival_time()) {
    _this->_internal_mutable_arrival_time()->::vasystem::api::v2::TimeOfDay::MergeFrom(
        from._internal_arrival_time());
  }
  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_archived() != 0) {
    _this->_internal_set_archived(from._internal_archived());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.days_flown_.InternalSwap(&other->_impl_.days_flown_);
  _impl_.aircraft_models_.InternalSwap(&other->_impl_.aircraft_models_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.icao_flight_number_, lhs_arena,
      &other->_impl_.icao_flight_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Route, _impl_.archived_)
      + sizeof(Route::_impl_.archived_)
      - PROTOBUF_FIELD_OFFSET(Route, _impl_.airline_)>(
          reinterpret_cast<char*>(&_impl_.airline_),
          reinterpret_cast<char*>(&other->_impl_.airline_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2froutes_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::ListRoutesRequest*
Arena::CreateMaybeMessage< ::vasystem::api::v2::ListRoutesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::ListRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::ListRoutesResponse*
Arena::CreateMaybeMessage< ::vasystem::api::v2::ListRoutesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::ListRoutesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::Route*
Arena::CreateMaybeMessage< ::vasystem::api::v2::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::Route >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
