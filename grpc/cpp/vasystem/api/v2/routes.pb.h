// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/routes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2froutes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2froutes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "vasystem/api/v2/aircraft.pb.h"
#include "vasystem/api/v2/airlines.pb.h"
#include "vasystem/api/v2/airports.pb.h"
#include "vasystem/api/v2/dayofweek.pb.h"
#include "vasystem/api/v2/timeofday.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vasystem_2fapi_2fv2_2froutes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2froutes_2eproto;
namespace vasystem {
namespace api {
namespace v2 {
class ListRoutesRequest;
struct ListRoutesRequestDefaultTypeInternal;
extern ListRoutesRequestDefaultTypeInternal _ListRoutesRequest_default_instance_;
class ListRoutesResponse;
struct ListRoutesResponseDefaultTypeInternal;
extern ListRoutesResponseDefaultTypeInternal _ListRoutesResponse_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> ::vasystem::api::v2::ListRoutesRequest* Arena::CreateMaybeMessage<::vasystem::api::v2::ListRoutesRequest>(Arena*);
template<> ::vasystem::api::v2::ListRoutesResponse* Arena::CreateMaybeMessage<::vasystem::api::v2::ListRoutesResponse>(Arena*);
template<> ::vasystem::api::v2::Route* Arena::CreateMaybeMessage<::vasystem::api::v2::Route>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class ListRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.ListRoutesRequest) */ {
 public:
  inline ListRoutesRequest() : ListRoutesRequest(nullptr) {}
  ~ListRoutesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesRequest(const ListRoutesRequest& from);
  ListRoutesRequest(ListRoutesRequest&& from) noexcept
    : ListRoutesRequest() {
    *this = ::std::move(from);
  }

  inline ListRoutesRequest& operator=(const ListRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesRequest& operator=(ListRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRoutesRequest*>(
               &_ListRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListRoutesRequest& a, ListRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRoutesRequest& from) {
    ListRoutesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.ListRoutesRequest";
  }
  protected:
  explicit ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAirlineIdFieldNumber = 1,
    kDepartureIcaoFieldNumber = 2,
    kArrivalIcaoFieldNumber = 3,
    kIcaoFlightNumberFieldNumber = 4,
    kPageTokenFieldNumber = 15,
    kPageSizeFieldNumber = 14,
    kIncludeArchivedFieldNumber = 5,
  };
  // string airline_id = 1 [json_name = "airlineId"];
  void clear_airline_id();
  const std::string& airline_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_airline_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_airline_id();
  PROTOBUF_NODISCARD std::string* release_airline_id();
  void set_allocated_airline_id(std::string* airline_id);
  private:
  const std::string& _internal_airline_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_airline_id(const std::string& value);
  std::string* _internal_mutable_airline_id();
  public:

  // string departure_icao = 2 [json_name = "departureIcao"];
  void clear_departure_icao();
  const std::string& departure_icao() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_departure_icao(ArgT0&& arg0, ArgT... args);
  std::string* mutable_departure_icao();
  PROTOBUF_NODISCARD std::string* release_departure_icao();
  void set_allocated_departure_icao(std::string* departure_icao);
  private:
  const std::string& _internal_departure_icao() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_departure_icao(const std::string& value);
  std::string* _internal_mutable_departure_icao();
  public:

  // string arrival_icao = 3 [json_name = "arrivalIcao"];
  void clear_arrival_icao();
  const std::string& arrival_icao() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_arrival_icao(ArgT0&& arg0, ArgT... args);
  std::string* mutable_arrival_icao();
  PROTOBUF_NODISCARD std::string* release_arrival_icao();
  void set_allocated_arrival_icao(std::string* arrival_icao);
  private:
  const std::string& _internal_arrival_icao() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arrival_icao(const std::string& value);
  std::string* _internal_mutable_arrival_icao();
  public:

  // string icao_flight_number = 4 [json_name = "icaoFlightNumber"];
  void clear_icao_flight_number();
  const std::string& icao_flight_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icao_flight_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icao_flight_number();
  PROTOBUF_NODISCARD std::string* release_icao_flight_number();
  void set_allocated_icao_flight_number(std::string* icao_flight_number);
  private:
  const std::string& _internal_icao_flight_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icao_flight_number(const std::string& value);
  std::string* _internal_mutable_icao_flight_number();
  public:

  // string page_token = 15 [json_name = "pageToken"];
  void clear_page_token();
  const std::string& page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // uint64 page_size = 14 [json_name = "pageSize"];
  void clear_page_size();
  uint64_t page_size() const;
  void set_page_size(uint64_t value);
  private:
  uint64_t _internal_page_size() const;
  void _internal_set_page_size(uint64_t value);
  public:

  // bool include_archived = 5 [json_name = "includeArchived"];
  void clear_include_archived();
  bool include_archived() const;
  void set_include_archived(bool value);
  private:
  bool _internal_include_archived() const;
  void _internal_set_include_archived(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.ListRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr airline_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departure_icao_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrival_icao_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icao_flight_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    uint64_t page_size_;
    bool include_archived_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.ListRoutesResponse) */ {
 public:
  inline ListRoutesResponse() : ListRoutesResponse(nullptr) {}
  ~ListRoutesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesResponse(const ListRoutesResponse& from);
  ListRoutesResponse(ListRoutesResponse&& from) noexcept
    : ListRoutesResponse() {
    *this = ::std::move(from);
  }

  inline ListRoutesResponse& operator=(const ListRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesResponse& operator=(ListRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRoutesResponse*>(
               &_ListRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListRoutesResponse& a, ListRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRoutesResponse& from) {
    ListRoutesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.ListRoutesResponse";
  }
  protected:
  explicit ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .vasystem.api.v2.Route routes = 1 [json_name = "routes"];
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::vasystem::api::v2::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Route >*
      mutable_routes();
  private:
  const ::vasystem::api::v2::Route& _internal_routes(int index) const;
  ::vasystem::api::v2::Route* _internal_add_routes();
  public:
  const ::vasystem::api::v2::Route& routes(int index) const;
  ::vasystem::api::v2::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Route >&
      routes() const;

  // string next_page_token = 2 [json_name = "nextPageToken"];
  void clear_next_page_token();
  const std::string& next_page_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_page_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.ListRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Route > routes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto;
};
// -------------------------------------------------------------------

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit PROTOBUF_CONSTEXPR Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Route& from) {
    Route::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFlownFieldNumber = 10,
    kAircraftModelsFieldNumber = 11,
    kIdFieldNumber = 1,
    kIcaoFlightNumberFieldNumber = 3,
    kAirlineFieldNumber = 2,
    kDepartureFieldNumber = 5,
    kArrivalFieldNumber = 6,
    kDepartureTimeFieldNumber = 7,
    kArrivalTimeFieldNumber = 8,
    kDurationFieldNumber = 9,
    kArchivedFieldNumber = 16,
  };
  // repeated .vasystem.api.v2.DayOfWeek days_flown = 10 [json_name = "daysFlown"];
  int days_flown_size() const;
  private:
  int _internal_days_flown_size() const;
  public:
  void clear_days_flown();
  private:
  ::vasystem::api::v2::DayOfWeek _internal_days_flown(int index) const;
  void _internal_add_days_flown(::vasystem::api::v2::DayOfWeek value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_days_flown();
  public:
  ::vasystem::api::v2::DayOfWeek days_flown(int index) const;
  void set_days_flown(int index, ::vasystem::api::v2::DayOfWeek value);
  void add_days_flown(::vasystem::api::v2::DayOfWeek value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& days_flown() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_days_flown();

  // repeated .vasystem.api.v2.AircraftModel aircraft_models = 11 [json_name = "aircraftModels"];
  int aircraft_models_size() const;
  private:
  int _internal_aircraft_models_size() const;
  public:
  void clear_aircraft_models();
  ::vasystem::api::v2::AircraftModel* mutable_aircraft_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::AircraftModel >*
      mutable_aircraft_models();
  private:
  const ::vasystem::api::v2::AircraftModel& _internal_aircraft_models(int index) const;
  ::vasystem::api::v2::AircraftModel* _internal_add_aircraft_models();
  public:
  const ::vasystem::api::v2::AircraftModel& aircraft_models(int index) const;
  ::vasystem::api::v2::AircraftModel* add_aircraft_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::AircraftModel >&
      aircraft_models() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string icao_flight_number = 3 [json_name = "icaoFlightNumber"];
  void clear_icao_flight_number();
  const std::string& icao_flight_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icao_flight_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icao_flight_number();
  PROTOBUF_NODISCARD std::string* release_icao_flight_number();
  void set_allocated_icao_flight_number(std::string* icao_flight_number);
  private:
  const std::string& _internal_icao_flight_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icao_flight_number(const std::string& value);
  std::string* _internal_mutable_icao_flight_number();
  public:

  // .vasystem.api.v2.Airline airline = 2 [json_name = "airline"];
  bool has_airline() const;
  private:
  bool _internal_has_airline() const;
  public:
  void clear_airline();
  const ::vasystem::api::v2::Airline& airline() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::Airline* release_airline();
  ::vasystem::api::v2::Airline* mutable_airline();
  void set_allocated_airline(::vasystem::api::v2::Airline* airline);
  private:
  const ::vasystem::api::v2::Airline& _internal_airline() const;
  ::vasystem::api::v2::Airline* _internal_mutable_airline();
  public:
  void unsafe_arena_set_allocated_airline(
      ::vasystem::api::v2::Airline* airline);
  ::vasystem::api::v2::Airline* unsafe_arena_release_airline();

  // .vasystem.api.v2.Airport departure = 5 [json_name = "departure"];
  bool has_departure() const;
  private:
  bool _internal_has_departure() const;
  public:
  void clear_departure();
  const ::vasystem::api::v2::Airport& departure() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::Airport* release_departure();
  ::vasystem::api::v2::Airport* mutable_departure();
  void set_allocated_departure(::vasystem::api::v2::Airport* departure);
  private:
  const ::vasystem::api::v2::Airport& _internal_departure() const;
  ::vasystem::api::v2::Airport* _internal_mutable_departure();
  public:
  void unsafe_arena_set_allocated_departure(
      ::vasystem::api::v2::Airport* departure);
  ::vasystem::api::v2::Airport* unsafe_arena_release_departure();

  // .vasystem.api.v2.Airport arrival = 6 [json_name = "arrival"];
  bool has_arrival() const;
  private:
  bool _internal_has_arrival() const;
  public:
  void clear_arrival();
  const ::vasystem::api::v2::Airport& arrival() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::Airport* release_arrival();
  ::vasystem::api::v2::Airport* mutable_arrival();
  void set_allocated_arrival(::vasystem::api::v2::Airport* arrival);
  private:
  const ::vasystem::api::v2::Airport& _internal_arrival() const;
  ::vasystem::api::v2::Airport* _internal_mutable_arrival();
  public:
  void unsafe_arena_set_allocated_arrival(
      ::vasystem::api::v2::Airport* arrival);
  ::vasystem::api::v2::Airport* unsafe_arena_release_arrival();

  // .vasystem.api.v2.TimeOfDay departure_time = 7 [json_name = "departureTime"];
  bool has_departure_time() const;
  private:
  bool _internal_has_departure_time() const;
  public:
  void clear_departure_time();
  const ::vasystem::api::v2::TimeOfDay& departure_time() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::TimeOfDay* release_departure_time();
  ::vasystem::api::v2::TimeOfDay* mutable_departure_time();
  void set_allocated_departure_time(::vasystem::api::v2::TimeOfDay* departure_time);
  private:
  const ::vasystem::api::v2::TimeOfDay& _internal_departure_time() const;
  ::vasystem::api::v2::TimeOfDay* _internal_mutable_departure_time();
  public:
  void unsafe_arena_set_allocated_departure_time(
      ::vasystem::api::v2::TimeOfDay* departure_time);
  ::vasystem::api::v2::TimeOfDay* unsafe_arena_release_departure_time();

  // .vasystem.api.v2.TimeOfDay arrival_time = 8 [json_name = "arrivalTime"];
  bool has_arrival_time() const;
  private:
  bool _internal_has_arrival_time() const;
  public:
  void clear_arrival_time();
  const ::vasystem::api::v2::TimeOfDay& arrival_time() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::TimeOfDay* release_arrival_time();
  ::vasystem::api::v2::TimeOfDay* mutable_arrival_time();
  void set_allocated_arrival_time(::vasystem::api::v2::TimeOfDay* arrival_time);
  private:
  const ::vasystem::api::v2::TimeOfDay& _internal_arrival_time() const;
  ::vasystem::api::v2::TimeOfDay* _internal_mutable_arrival_time();
  public:
  void unsafe_arena_set_allocated_arrival_time(
      ::vasystem::api::v2::TimeOfDay* arrival_time);
  ::vasystem::api::v2::TimeOfDay* unsafe_arena_release_arrival_time();

  // .google.protobuf.Duration duration = 9 [json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // bool archived = 16 [json_name = "archived"];
  void clear_archived();
  bool archived() const;
  void set_archived(bool value);
  private:
  bool _internal_archived() const;
  void _internal_set_archived(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> days_flown_;
    mutable std::atomic<int> _days_flown_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::AircraftModel > aircraft_models_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icao_flight_number_;
    ::vasystem::api::v2::Airline* airline_;
    ::vasystem::api::v2::Airport* departure_;
    ::vasystem::api::v2::Airport* arrival_;
    ::vasystem::api::v2::TimeOfDay* departure_time_;
    ::vasystem::api::v2::TimeOfDay* arrival_time_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    bool archived_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2froutes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListRoutesRequest

// string airline_id = 1 [json_name = "airlineId"];
inline void ListRoutesRequest::clear_airline_id() {
  _impl_.airline_id_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::airline_id() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.airline_id)
  return _internal_airline_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_airline_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.airline_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.airline_id)
}
inline std::string* ListRoutesRequest::mutable_airline_id() {
  std::string* _s = _internal_mutable_airline_id();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesRequest.airline_id)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_airline_id() const {
  return _impl_.airline_id_.Get();
}
inline void ListRoutesRequest::_internal_set_airline_id(const std::string& value) {
  
  _impl_.airline_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_airline_id() {
  
  return _impl_.airline_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_airline_id() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesRequest.airline_id)
  return _impl_.airline_id_.Release();
}
inline void ListRoutesRequest::set_allocated_airline_id(std::string* airline_id) {
  if (airline_id != nullptr) {
    
  } else {
    
  }
  _impl_.airline_id_.SetAllocated(airline_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.airline_id_.IsDefault()) {
    _impl_.airline_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesRequest.airline_id)
}

// string departure_icao = 2 [json_name = "departureIcao"];
inline void ListRoutesRequest::clear_departure_icao() {
  _impl_.departure_icao_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::departure_icao() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.departure_icao)
  return _internal_departure_icao();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_departure_icao(ArgT0&& arg0, ArgT... args) {
 
 _impl_.departure_icao_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.departure_icao)
}
inline std::string* ListRoutesRequest::mutable_departure_icao() {
  std::string* _s = _internal_mutable_departure_icao();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesRequest.departure_icao)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_departure_icao() const {
  return _impl_.departure_icao_.Get();
}
inline void ListRoutesRequest::_internal_set_departure_icao(const std::string& value) {
  
  _impl_.departure_icao_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_departure_icao() {
  
  return _impl_.departure_icao_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_departure_icao() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesRequest.departure_icao)
  return _impl_.departure_icao_.Release();
}
inline void ListRoutesRequest::set_allocated_departure_icao(std::string* departure_icao) {
  if (departure_icao != nullptr) {
    
  } else {
    
  }
  _impl_.departure_icao_.SetAllocated(departure_icao, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.departure_icao_.IsDefault()) {
    _impl_.departure_icao_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesRequest.departure_icao)
}

// string arrival_icao = 3 [json_name = "arrivalIcao"];
inline void ListRoutesRequest::clear_arrival_icao() {
  _impl_.arrival_icao_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::arrival_icao() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.arrival_icao)
  return _internal_arrival_icao();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_arrival_icao(ArgT0&& arg0, ArgT... args) {
 
 _impl_.arrival_icao_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.arrival_icao)
}
inline std::string* ListRoutesRequest::mutable_arrival_icao() {
  std::string* _s = _internal_mutable_arrival_icao();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesRequest.arrival_icao)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_arrival_icao() const {
  return _impl_.arrival_icao_.Get();
}
inline void ListRoutesRequest::_internal_set_arrival_icao(const std::string& value) {
  
  _impl_.arrival_icao_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_arrival_icao() {
  
  return _impl_.arrival_icao_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_arrival_icao() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesRequest.arrival_icao)
  return _impl_.arrival_icao_.Release();
}
inline void ListRoutesRequest::set_allocated_arrival_icao(std::string* arrival_icao) {
  if (arrival_icao != nullptr) {
    
  } else {
    
  }
  _impl_.arrival_icao_.SetAllocated(arrival_icao, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.arrival_icao_.IsDefault()) {
    _impl_.arrival_icao_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesRequest.arrival_icao)
}

// string icao_flight_number = 4 [json_name = "icaoFlightNumber"];
inline void ListRoutesRequest::clear_icao_flight_number() {
  _impl_.icao_flight_number_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::icao_flight_number() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.icao_flight_number)
  return _internal_icao_flight_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_icao_flight_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icao_flight_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.icao_flight_number)
}
inline std::string* ListRoutesRequest::mutable_icao_flight_number() {
  std::string* _s = _internal_mutable_icao_flight_number();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesRequest.icao_flight_number)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_icao_flight_number() const {
  return _impl_.icao_flight_number_.Get();
}
inline void ListRoutesRequest::_internal_set_icao_flight_number(const std::string& value) {
  
  _impl_.icao_flight_number_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_icao_flight_number() {
  
  return _impl_.icao_flight_number_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_icao_flight_number() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesRequest.icao_flight_number)
  return _impl_.icao_flight_number_.Release();
}
inline void ListRoutesRequest::set_allocated_icao_flight_number(std::string* icao_flight_number) {
  if (icao_flight_number != nullptr) {
    
  } else {
    
  }
  _impl_.icao_flight_number_.SetAllocated(icao_flight_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icao_flight_number_.IsDefault()) {
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesRequest.icao_flight_number)
}

// bool include_archived = 5 [json_name = "includeArchived"];
inline void ListRoutesRequest::clear_include_archived() {
  _impl_.include_archived_ = false;
}
inline bool ListRoutesRequest::_internal_include_archived() const {
  return _impl_.include_archived_;
}
inline bool ListRoutesRequest::include_archived() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.include_archived)
  return _internal_include_archived();
}
inline void ListRoutesRequest::_internal_set_include_archived(bool value) {
  
  _impl_.include_archived_ = value;
}
inline void ListRoutesRequest::set_include_archived(bool value) {
  _internal_set_include_archived(value);
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.include_archived)
}

// uint64 page_size = 14 [json_name = "pageSize"];
inline void ListRoutesRequest::clear_page_size() {
  _impl_.page_size_ = uint64_t{0u};
}
inline uint64_t ListRoutesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline uint64_t ListRoutesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.page_size)
  return _internal_page_size();
}
inline void ListRoutesRequest::_internal_set_page_size(uint64_t value) {
  
  _impl_.page_size_ = value;
}
inline void ListRoutesRequest::set_page_size(uint64_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.page_size)
}

// string page_token = 15 [json_name = "pageToken"];
inline void ListRoutesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListRoutesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesRequest.page_token)
  return _internal_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesRequest::set_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesRequest.page_token)
}
inline std::string* ListRoutesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesRequest.page_token)
  return _s;
}
inline const std::string& ListRoutesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListRoutesRequest::_internal_set_page_token(const std::string& value) {
  
  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::_internal_mutable_page_token() {
  
  return _impl_.page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListRoutesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  _impl_.page_token_.SetAllocated(page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.page_token_.IsDefault()) {
    _impl_.page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesRequest.page_token)
}

// -------------------------------------------------------------------

// ListRoutesResponse

// repeated .vasystem.api.v2.Route routes = 1 [json_name = "routes"];
inline int ListRoutesResponse::_internal_routes_size() const {
  return _impl_.routes_.size();
}
inline int ListRoutesResponse::routes_size() const {
  return _internal_routes_size();
}
inline void ListRoutesResponse::clear_routes() {
  _impl_.routes_.Clear();
}
inline ::vasystem::api::v2::Route* ListRoutesResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesResponse.routes)
  return _impl_.routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Route >*
ListRoutesResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:vasystem.api.v2.ListRoutesResponse.routes)
  return &_impl_.routes_;
}
inline const ::vasystem::api::v2::Route& ListRoutesResponse::_internal_routes(int index) const {
  return _impl_.routes_.Get(index);
}
inline const ::vasystem::api::v2::Route& ListRoutesResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesResponse.routes)
  return _internal_routes(index);
}
inline ::vasystem::api::v2::Route* ListRoutesResponse::_internal_add_routes() {
  return _impl_.routes_.Add();
}
inline ::vasystem::api::v2::Route* ListRoutesResponse::add_routes() {
  ::vasystem::api::v2::Route* _add = _internal_add_routes();
  // @@protoc_insertion_point(field_add:vasystem.api.v2.ListRoutesResponse.routes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::Route >&
ListRoutesResponse::routes() const {
  // @@protoc_insertion_point(field_list:vasystem.api.v2.ListRoutesResponse.routes)
  return _impl_.routes_;
}

// string next_page_token = 2 [json_name = "nextPageToken"];
inline void ListRoutesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListRoutesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.ListRoutesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRoutesResponse::set_next_page_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.next_page_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.ListRoutesResponse.next_page_token)
}
inline std::string* ListRoutesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.ListRoutesResponse.next_page_token)
  return _s;
}
inline const std::string& ListRoutesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListRoutesResponse::_internal_set_next_page_token(const std::string& value) {
  
  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRoutesResponse::_internal_mutable_next_page_token() {
  
  return _impl_.next_page_token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRoutesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.ListRoutesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListRoutesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  _impl_.next_page_token_.SetAllocated(next_page_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.next_page_token_.IsDefault()) {
    _impl_.next_page_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.ListRoutesResponse.next_page_token)
}

// -------------------------------------------------------------------

// Route

// string id = 1 [json_name = "id"];
inline void Route::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Route::id() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Route.id)
}
inline std::string* Route::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.id)
  return _s;
}
inline const std::string& Route::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Route::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_id() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.id)
  return _impl_.id_.Release();
}
inline void Route::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.id)
}

// .vasystem.api.v2.Airline airline = 2 [json_name = "airline"];
inline bool Route::_internal_has_airline() const {
  return this != internal_default_instance() && _impl_.airline_ != nullptr;
}
inline bool Route::has_airline() const {
  return _internal_has_airline();
}
inline const ::vasystem::api::v2::Airline& Route::_internal_airline() const {
  const ::vasystem::api::v2::Airline* p = _impl_.airline_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::Airline&>(
      ::vasystem::api::v2::_Airline_default_instance_);
}
inline const ::vasystem::api::v2::Airline& Route::airline() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.airline)
  return _internal_airline();
}
inline void Route::unsafe_arena_set_allocated_airline(
    ::vasystem::api::v2::Airline* airline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airline_);
  }
  _impl_.airline_ = airline;
  if (airline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.airline)
}
inline ::vasystem::api::v2::Airline* Route::release_airline() {
  
  ::vasystem::api::v2::Airline* temp = _impl_.airline_;
  _impl_.airline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::Airline* Route::unsafe_arena_release_airline() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.airline)
  
  ::vasystem::api::v2::Airline* temp = _impl_.airline_;
  _impl_.airline_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::Airline* Route::_internal_mutable_airline() {
  
  if (_impl_.airline_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::Airline>(GetArenaForAllocation());
    _impl_.airline_ = p;
  }
  return _impl_.airline_;
}
inline ::vasystem::api::v2::Airline* Route::mutable_airline() {
  ::vasystem::api::v2::Airline* _msg = _internal_mutable_airline();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.airline)
  return _msg;
}
inline void Route::set_allocated_airline(::vasystem::api::v2::Airline* airline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.airline_);
  }
  if (airline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airline));
    if (message_arena != submessage_arena) {
      airline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airline, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.airline_ = airline;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.airline)
}

// string icao_flight_number = 3 [json_name = "icaoFlightNumber"];
inline void Route::clear_icao_flight_number() {
  _impl_.icao_flight_number_.ClearToEmpty();
}
inline const std::string& Route::icao_flight_number() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.icao_flight_number)
  return _internal_icao_flight_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_icao_flight_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.icao_flight_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Route.icao_flight_number)
}
inline std::string* Route::mutable_icao_flight_number() {
  std::string* _s = _internal_mutable_icao_flight_number();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.icao_flight_number)
  return _s;
}
inline const std::string& Route::_internal_icao_flight_number() const {
  return _impl_.icao_flight_number_.Get();
}
inline void Route::_internal_set_icao_flight_number(const std::string& value) {
  
  _impl_.icao_flight_number_.Set(value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_icao_flight_number() {
  
  return _impl_.icao_flight_number_.Mutable(GetArenaForAllocation());
}
inline std::string* Route::release_icao_flight_number() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.icao_flight_number)
  return _impl_.icao_flight_number_.Release();
}
inline void Route::set_allocated_icao_flight_number(std::string* icao_flight_number) {
  if (icao_flight_number != nullptr) {
    
  } else {
    
  }
  _impl_.icao_flight_number_.SetAllocated(icao_flight_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.icao_flight_number_.IsDefault()) {
    _impl_.icao_flight_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.icao_flight_number)
}

// .vasystem.api.v2.Airport departure = 5 [json_name = "departure"];
inline bool Route::_internal_has_departure() const {
  return this != internal_default_instance() && _impl_.departure_ != nullptr;
}
inline bool Route::has_departure() const {
  return _internal_has_departure();
}
inline const ::vasystem::api::v2::Airport& Route::_internal_departure() const {
  const ::vasystem::api::v2::Airport* p = _impl_.departure_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::Airport&>(
      ::vasystem::api::v2::_Airport_default_instance_);
}
inline const ::vasystem::api::v2::Airport& Route::departure() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.departure)
  return _internal_departure();
}
inline void Route::unsafe_arena_set_allocated_departure(
    ::vasystem::api::v2::Airport* departure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_);
  }
  _impl_.departure_ = departure;
  if (departure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.departure)
}
inline ::vasystem::api::v2::Airport* Route::release_departure() {
  
  ::vasystem::api::v2::Airport* temp = _impl_.departure_;
  _impl_.departure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::Airport* Route::unsafe_arena_release_departure() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.departure)
  
  ::vasystem::api::v2::Airport* temp = _impl_.departure_;
  _impl_.departure_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::Airport* Route::_internal_mutable_departure() {
  
  if (_impl_.departure_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::Airport>(GetArenaForAllocation());
    _impl_.departure_ = p;
  }
  return _impl_.departure_;
}
inline ::vasystem::api::v2::Airport* Route::mutable_departure() {
  ::vasystem::api::v2::Airport* _msg = _internal_mutable_departure();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.departure)
  return _msg;
}
inline void Route::set_allocated_departure(::vasystem::api::v2::Airport* departure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_);
  }
  if (departure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(departure));
    if (message_arena != submessage_arena) {
      departure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departure, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.departure_ = departure;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.departure)
}

// .vasystem.api.v2.Airport arrival = 6 [json_name = "arrival"];
inline bool Route::_internal_has_arrival() const {
  return this != internal_default_instance() && _impl_.arrival_ != nullptr;
}
inline bool Route::has_arrival() const {
  return _internal_has_arrival();
}
inline const ::vasystem::api::v2::Airport& Route::_internal_arrival() const {
  const ::vasystem::api::v2::Airport* p = _impl_.arrival_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::Airport&>(
      ::vasystem::api::v2::_Airport_default_instance_);
}
inline const ::vasystem::api::v2::Airport& Route::arrival() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.arrival)
  return _internal_arrival();
}
inline void Route::unsafe_arena_set_allocated_arrival(
    ::vasystem::api::v2::Airport* arrival) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrival_);
  }
  _impl_.arrival_ = arrival;
  if (arrival) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.arrival)
}
inline ::vasystem::api::v2::Airport* Route::release_arrival() {
  
  ::vasystem::api::v2::Airport* temp = _impl_.arrival_;
  _impl_.arrival_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::Airport* Route::unsafe_arena_release_arrival() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.arrival)
  
  ::vasystem::api::v2::Airport* temp = _impl_.arrival_;
  _impl_.arrival_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::Airport* Route::_internal_mutable_arrival() {
  
  if (_impl_.arrival_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::Airport>(GetArenaForAllocation());
    _impl_.arrival_ = p;
  }
  return _impl_.arrival_;
}
inline ::vasystem::api::v2::Airport* Route::mutable_arrival() {
  ::vasystem::api::v2::Airport* _msg = _internal_mutable_arrival();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.arrival)
  return _msg;
}
inline void Route::set_allocated_arrival(::vasystem::api::v2::Airport* arrival) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrival_);
  }
  if (arrival) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrival));
    if (message_arena != submessage_arena) {
      arrival = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrival, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arrival_ = arrival;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.arrival)
}

// .vasystem.api.v2.TimeOfDay departure_time = 7 [json_name = "departureTime"];
inline bool Route::_internal_has_departure_time() const {
  return this != internal_default_instance() && _impl_.departure_time_ != nullptr;
}
inline bool Route::has_departure_time() const {
  return _internal_has_departure_time();
}
inline const ::vasystem::api::v2::TimeOfDay& Route::_internal_departure_time() const {
  const ::vasystem::api::v2::TimeOfDay* p = _impl_.departure_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::TimeOfDay&>(
      ::vasystem::api::v2::_TimeOfDay_default_instance_);
}
inline const ::vasystem::api::v2::TimeOfDay& Route::departure_time() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.departure_time)
  return _internal_departure_time();
}
inline void Route::unsafe_arena_set_allocated_departure_time(
    ::vasystem::api::v2::TimeOfDay* departure_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_time_);
  }
  _impl_.departure_time_ = departure_time;
  if (departure_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.departure_time)
}
inline ::vasystem::api::v2::TimeOfDay* Route::release_departure_time() {
  
  ::vasystem::api::v2::TimeOfDay* temp = _impl_.departure_time_;
  _impl_.departure_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::TimeOfDay* Route::unsafe_arena_release_departure_time() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.departure_time)
  
  ::vasystem::api::v2::TimeOfDay* temp = _impl_.departure_time_;
  _impl_.departure_time_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::TimeOfDay* Route::_internal_mutable_departure_time() {
  
  if (_impl_.departure_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::TimeOfDay>(GetArenaForAllocation());
    _impl_.departure_time_ = p;
  }
  return _impl_.departure_time_;
}
inline ::vasystem::api::v2::TimeOfDay* Route::mutable_departure_time() {
  ::vasystem::api::v2::TimeOfDay* _msg = _internal_mutable_departure_time();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.departure_time)
  return _msg;
}
inline void Route::set_allocated_departure_time(::vasystem::api::v2::TimeOfDay* departure_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_time_);
  }
  if (departure_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(departure_time));
    if (message_arena != submessage_arena) {
      departure_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departure_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.departure_time_ = departure_time;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.departure_time)
}

// .vasystem.api.v2.TimeOfDay arrival_time = 8 [json_name = "arrivalTime"];
inline bool Route::_internal_has_arrival_time() const {
  return this != internal_default_instance() && _impl_.arrival_time_ != nullptr;
}
inline bool Route::has_arrival_time() const {
  return _internal_has_arrival_time();
}
inline const ::vasystem::api::v2::TimeOfDay& Route::_internal_arrival_time() const {
  const ::vasystem::api::v2::TimeOfDay* p = _impl_.arrival_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::TimeOfDay&>(
      ::vasystem::api::v2::_TimeOfDay_default_instance_);
}
inline const ::vasystem::api::v2::TimeOfDay& Route::arrival_time() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.arrival_time)
  return _internal_arrival_time();
}
inline void Route::unsafe_arena_set_allocated_arrival_time(
    ::vasystem::api::v2::TimeOfDay* arrival_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrival_time_);
  }
  _impl_.arrival_time_ = arrival_time;
  if (arrival_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.arrival_time)
}
inline ::vasystem::api::v2::TimeOfDay* Route::release_arrival_time() {
  
  ::vasystem::api::v2::TimeOfDay* temp = _impl_.arrival_time_;
  _impl_.arrival_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::TimeOfDay* Route::unsafe_arena_release_arrival_time() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.arrival_time)
  
  ::vasystem::api::v2::TimeOfDay* temp = _impl_.arrival_time_;
  _impl_.arrival_time_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::TimeOfDay* Route::_internal_mutable_arrival_time() {
  
  if (_impl_.arrival_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::TimeOfDay>(GetArenaForAllocation());
    _impl_.arrival_time_ = p;
  }
  return _impl_.arrival_time_;
}
inline ::vasystem::api::v2::TimeOfDay* Route::mutable_arrival_time() {
  ::vasystem::api::v2::TimeOfDay* _msg = _internal_mutable_arrival_time();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.arrival_time)
  return _msg;
}
inline void Route::set_allocated_arrival_time(::vasystem::api::v2::TimeOfDay* arrival_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.arrival_time_);
  }
  if (arrival_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arrival_time));
    if (message_arena != submessage_arena) {
      arrival_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrival_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.arrival_time_ = arrival_time;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.arrival_time)
}

// .google.protobuf.Duration duration = 9 [json_name = "duration"];
inline bool Route::_internal_has_duration() const {
  return this != internal_default_instance() && _impl_.duration_ != nullptr;
}
inline bool Route::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Route::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Route::duration() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.duration)
  return _internal_duration();
}
inline void Route::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.Route.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Route::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Route::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.Route.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Route::_internal_mutable_duration() {
  
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Route::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.duration)
  return _msg;
}
inline void Route::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.Route.duration)
}

// repeated .vasystem.api.v2.DayOfWeek days_flown = 10 [json_name = "daysFlown"];
inline int Route::_internal_days_flown_size() const {
  return _impl_.days_flown_.size();
}
inline int Route::days_flown_size() const {
  return _internal_days_flown_size();
}
inline void Route::clear_days_flown() {
  _impl_.days_flown_.Clear();
}
inline ::vasystem::api::v2::DayOfWeek Route::_internal_days_flown(int index) const {
  return static_cast< ::vasystem::api::v2::DayOfWeek >(_impl_.days_flown_.Get(index));
}
inline ::vasystem::api::v2::DayOfWeek Route::days_flown(int index) const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.days_flown)
  return _internal_days_flown(index);
}
inline void Route::set_days_flown(int index, ::vasystem::api::v2::DayOfWeek value) {
  _impl_.days_flown_.Set(index, value);
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Route.days_flown)
}
inline void Route::_internal_add_days_flown(::vasystem::api::v2::DayOfWeek value) {
  _impl_.days_flown_.Add(value);
}
inline void Route::add_days_flown(::vasystem::api::v2::DayOfWeek value) {
  _internal_add_days_flown(value);
  // @@protoc_insertion_point(field_add:vasystem.api.v2.Route.days_flown)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Route::days_flown() const {
  // @@protoc_insertion_point(field_list:vasystem.api.v2.Route.days_flown)
  return _impl_.days_flown_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Route::_internal_mutable_days_flown() {
  return &_impl_.days_flown_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Route::mutable_days_flown() {
  // @@protoc_insertion_point(field_mutable_list:vasystem.api.v2.Route.days_flown)
  return _internal_mutable_days_flown();
}

// repeated .vasystem.api.v2.AircraftModel aircraft_models = 11 [json_name = "aircraftModels"];
inline int Route::_internal_aircraft_models_size() const {
  return _impl_.aircraft_models_.size();
}
inline int Route::aircraft_models_size() const {
  return _internal_aircraft_models_size();
}
inline ::vasystem::api::v2::AircraftModel* Route::mutable_aircraft_models(int index) {
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.Route.aircraft_models)
  return _impl_.aircraft_models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::AircraftModel >*
Route::mutable_aircraft_models() {
  // @@protoc_insertion_point(field_mutable_list:vasystem.api.v2.Route.aircraft_models)
  return &_impl_.aircraft_models_;
}
inline const ::vasystem::api::v2::AircraftModel& Route::_internal_aircraft_models(int index) const {
  return _impl_.aircraft_models_.Get(index);
}
inline const ::vasystem::api::v2::AircraftModel& Route::aircraft_models(int index) const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.aircraft_models)
  return _internal_aircraft_models(index);
}
inline ::vasystem::api::v2::AircraftModel* Route::_internal_add_aircraft_models() {
  return _impl_.aircraft_models_.Add();
}
inline ::vasystem::api::v2::AircraftModel* Route::add_aircraft_models() {
  ::vasystem::api::v2::AircraftModel* _add = _internal_add_aircraft_models();
  // @@protoc_insertion_point(field_add:vasystem.api.v2.Route.aircraft_models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vasystem::api::v2::AircraftModel >&
Route::aircraft_models() const {
  // @@protoc_insertion_point(field_list:vasystem.api.v2.Route.aircraft_models)
  return _impl_.aircraft_models_;
}

// bool archived = 16 [json_name = "archived"];
inline void Route::clear_archived() {
  _impl_.archived_ = false;
}
inline bool Route::_internal_archived() const {
  return _impl_.archived_;
}
inline bool Route::archived() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.Route.archived)
  return _internal_archived();
}
inline void Route::_internal_set_archived(bool value) {
  
  _impl_.archived_ = value;
}
inline void Route::set_archived(bool value) {
  _internal_set_archived(value);
  // @@protoc_insertion_point(field_set:vasystem.api.v2.Route.archived)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace vasystem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2froutes_2eproto
