// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/virtual_airlines.proto

#include "vasystem/api/v2/virtual_airlines.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vasystem {
namespace api {
namespace v2 {
PROTOBUF_CONSTEXPR GetVirtualAirlineRequest::GetVirtualAirlineRequest(
    ::_pbi::ConstantInitialized) {}
struct GetVirtualAirlineRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVirtualAirlineRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVirtualAirlineRequestDefaultTypeInternal() {}
  union {
    GetVirtualAirlineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVirtualAirlineRequestDefaultTypeInternal _GetVirtualAirlineRequest_default_instance_;
PROTOBUF_CONSTEXPR GetVirtualAirlineResponse::GetVirtualAirlineResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.virtual_airline_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetVirtualAirlineResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVirtualAirlineResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVirtualAirlineResponseDefaultTypeInternal() {}
  union {
    GetVirtualAirlineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVirtualAirlineResponseDefaultTypeInternal _GetVirtualAirlineResponse_default_instance_;
PROTOBUF_CONSTEXPR VirtualAirline::VirtualAirline(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VirtualAirlineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualAirlineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualAirlineDefaultTypeInternal() {}
  union {
    VirtualAirline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualAirlineDefaultTypeInternal _VirtualAirline_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
static ::_pb::Metadata file_level_metadata_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto = nullptr;

const uint32_t TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::GetVirtualAirlineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::GetVirtualAirlineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::GetVirtualAirlineResponse, _impl_.virtual_airline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::VirtualAirline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::VirtualAirline, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::vasystem::api::v2::VirtualAirline, _impl_.url_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vasystem::api::v2::GetVirtualAirlineRequest)},
  { 6, -1, -1, sizeof(::vasystem::api::v2::GetVirtualAirlineResponse)},
  { 13, -1, -1, sizeof(::vasystem::api::v2::VirtualAirline)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vasystem::api::v2::_GetVirtualAirlineRequest_default_instance_._instance,
  &::vasystem::api::v2::_GetVirtualAirlineResponse_default_instance_._instance,
  &::vasystem::api::v2::_VirtualAirline_default_instance_._instance,
};

const char descriptor_table_protodef_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&vasystem/api/v2/virtual_airlines.proto"
  "\022\017vasystem.api.v2\"\032\n\030GetVirtualAirlineRe"
  "quest\"e\n\031GetVirtualAirlineResponse\022H\n\017vi"
  "rtual_airline\030\001 \001(\0132\037.vasystem.api.v2.Vi"
  "rtualAirlineR\016virtualAirline\"6\n\016VirtualA"
  "irline\022\022\n\004name\030\001 \001(\tR\004name\022\020\n\003url\030\002 \001(\tR"
  "\003url2\206\001\n\026VirtualAirlinesService\022l\n\021GetVi"
  "rtualAirline\022).vasystem.api.v2.GetVirtua"
  "lAirlineRequest\032*.vasystem.api.v2.GetVir"
  "tualAirlineResponse\"\000B\300\001\n\023dev.vasystem.a"
  "pi.v2B\024VirtualAirlinesProtoP\001Z5github.co"
  "m/vasystem/api/grpc/go/vasystem/api/v2;a"
  "piv2\242\002\003VAX\252\002\017Vasystem.Api.V2\312\002\017Vasystem\\"
  "Api\\V2\342\002\033Vasystem\\Api\\V2\\GPBMetadata\352\002\021V"
  "asystem::Api::V2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto = {
    false, false, 584, descriptor_table_protodef_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto,
    "vasystem/api/v2/virtual_airlines.proto",
    &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto::offsets,
    file_level_metadata_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto, file_level_enum_descriptors_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto,
    file_level_service_descriptors_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_getter() {
  return &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto(&descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto);
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class GetVirtualAirlineRequest::_Internal {
 public:
};

GetVirtualAirlineRequest::GetVirtualAirlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.GetVirtualAirlineRequest)
}
GetVirtualAirlineRequest::GetVirtualAirlineRequest(const GetVirtualAirlineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetVirtualAirlineRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.GetVirtualAirlineRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVirtualAirlineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVirtualAirlineRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetVirtualAirlineRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto[0]);
}

// ===================================================================

class GetVirtualAirlineResponse::_Internal {
 public:
  static const ::vasystem::api::v2::VirtualAirline& virtual_airline(const GetVirtualAirlineResponse* msg);
};

const ::vasystem::api::v2::VirtualAirline&
GetVirtualAirlineResponse::_Internal::virtual_airline(const GetVirtualAirlineResponse* msg) {
  return *msg->_impl_.virtual_airline_;
}
GetVirtualAirlineResponse::GetVirtualAirlineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.GetVirtualAirlineResponse)
}
GetVirtualAirlineResponse::GetVirtualAirlineResponse(const GetVirtualAirlineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetVirtualAirlineResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_airline_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_virtual_airline()) {
    _this->_impl_.virtual_airline_ = new ::vasystem::api::v2::VirtualAirline(*from._impl_.virtual_airline_);
  }
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.GetVirtualAirlineResponse)
}

inline void GetVirtualAirlineResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.virtual_airline_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetVirtualAirlineResponse::~GetVirtualAirlineResponse() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.GetVirtualAirlineResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetVirtualAirlineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.virtual_airline_;
}

void GetVirtualAirlineResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetVirtualAirlineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.GetVirtualAirlineResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.virtual_airline_ != nullptr) {
    delete _impl_.virtual_airline_;
  }
  _impl_.virtual_airline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVirtualAirlineResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vasystem.api.v2.VirtualAirline virtual_airline = 1 [json_name = "virtualAirline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_airline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetVirtualAirlineResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.GetVirtualAirlineResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vasystem.api.v2.VirtualAirline virtual_airline = 1 [json_name = "virtualAirline"];
  if (this->_internal_has_virtual_airline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::virtual_airline(this),
        _Internal::virtual_airline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.GetVirtualAirlineResponse)
  return target;
}

size_t GetVirtualAirlineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.GetVirtualAirlineResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vasystem.api.v2.VirtualAirline virtual_airline = 1 [json_name = "virtualAirline"];
  if (this->_internal_has_virtual_airline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.virtual_airline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetVirtualAirlineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetVirtualAirlineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetVirtualAirlineResponse::GetClassData() const { return &_class_data_; }


void GetVirtualAirlineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetVirtualAirlineResponse*>(&to_msg);
  auto& from = static_cast<const GetVirtualAirlineResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.GetVirtualAirlineResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_virtual_airline()) {
    _this->_internal_mutable_virtual_airline()->::vasystem::api::v2::VirtualAirline::MergeFrom(
        from._internal_virtual_airline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetVirtualAirlineResponse::CopyFrom(const GetVirtualAirlineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.GetVirtualAirlineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVirtualAirlineResponse::IsInitialized() const {
  return true;
}

void GetVirtualAirlineResponse::InternalSwap(GetVirtualAirlineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.virtual_airline_, other->_impl_.virtual_airline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVirtualAirlineResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto[1]);
}

// ===================================================================

class VirtualAirline::_Internal {
 public:
};

VirtualAirline::VirtualAirline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vasystem.api.v2.VirtualAirline)
}
VirtualAirline::VirtualAirline(const VirtualAirline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VirtualAirline* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    _this->_impl_.url_.Set(from._internal_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vasystem.api.v2.VirtualAirline)
}

inline void VirtualAirline::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VirtualAirline::~VirtualAirline() {
  // @@protoc_insertion_point(destructor:vasystem.api.v2.VirtualAirline)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VirtualAirline::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.url_.Destroy();
}

void VirtualAirline::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VirtualAirline::Clear() {
// @@protoc_insertion_point(message_clear_start:vasystem.api.v2.VirtualAirline)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualAirline::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.VirtualAirline.name"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2 [json_name = "url"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vasystem.api.v2.VirtualAirline.url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VirtualAirline::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vasystem.api.v2.VirtualAirline)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.VirtualAirline.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string url = 2 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vasystem.api.v2.VirtualAirline.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vasystem.api.v2.VirtualAirline)
  return target;
}

size_t VirtualAirline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vasystem.api.v2.VirtualAirline)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 2 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VirtualAirline::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VirtualAirline::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VirtualAirline::GetClassData() const { return &_class_data_; }


void VirtualAirline::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VirtualAirline*>(&to_msg);
  auto& from = static_cast<const VirtualAirline&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vasystem.api.v2.VirtualAirline)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_url().empty()) {
    _this->_internal_set_url(from._internal_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualAirline::CopyFrom(const VirtualAirline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vasystem.api.v2.VirtualAirline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualAirline::IsInitialized() const {
  return true;
}

void VirtualAirline::InternalSwap(VirtualAirline* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.url_, lhs_arena,
      &other->_impl_.url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualAirline::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_getter, &descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto_once,
      file_level_metadata_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::GetVirtualAirlineRequest*
Arena::CreateMaybeMessage< ::vasystem::api::v2::GetVirtualAirlineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::GetVirtualAirlineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::GetVirtualAirlineResponse*
Arena::CreateMaybeMessage< ::vasystem::api::v2::GetVirtualAirlineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::GetVirtualAirlineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::vasystem::api::v2::VirtualAirline*
Arena::CreateMaybeMessage< ::vasystem::api::v2::VirtualAirline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vasystem::api::v2::VirtualAirline >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
