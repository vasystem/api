// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vasystem/api/v2/virtual_airlines.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto;
namespace vasystem {
namespace api {
namespace v2 {
class GetVirtualAirlineRequest;
struct GetVirtualAirlineRequestDefaultTypeInternal;
extern GetVirtualAirlineRequestDefaultTypeInternal _GetVirtualAirlineRequest_default_instance_;
class GetVirtualAirlineResponse;
struct GetVirtualAirlineResponseDefaultTypeInternal;
extern GetVirtualAirlineResponseDefaultTypeInternal _GetVirtualAirlineResponse_default_instance_;
class VirtualAirline;
struct VirtualAirlineDefaultTypeInternal;
extern VirtualAirlineDefaultTypeInternal _VirtualAirline_default_instance_;
}  // namespace v2
}  // namespace api
}  // namespace vasystem
PROTOBUF_NAMESPACE_OPEN
template<> ::vasystem::api::v2::GetVirtualAirlineRequest* Arena::CreateMaybeMessage<::vasystem::api::v2::GetVirtualAirlineRequest>(Arena*);
template<> ::vasystem::api::v2::GetVirtualAirlineResponse* Arena::CreateMaybeMessage<::vasystem::api::v2::GetVirtualAirlineResponse>(Arena*);
template<> ::vasystem::api::v2::VirtualAirline* Arena::CreateMaybeMessage<::vasystem::api::v2::VirtualAirline>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vasystem {
namespace api {
namespace v2 {

// ===================================================================

class GetVirtualAirlineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:vasystem.api.v2.GetVirtualAirlineRequest) */ {
 public:
  inline GetVirtualAirlineRequest() : GetVirtualAirlineRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetVirtualAirlineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualAirlineRequest(const GetVirtualAirlineRequest& from);
  GetVirtualAirlineRequest(GetVirtualAirlineRequest&& from) noexcept
    : GetVirtualAirlineRequest() {
    *this = ::std::move(from);
  }

  inline GetVirtualAirlineRequest& operator=(const GetVirtualAirlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualAirlineRequest& operator=(GetVirtualAirlineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualAirlineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualAirlineRequest* internal_default_instance() {
    return reinterpret_cast<const GetVirtualAirlineRequest*>(
               &_GetVirtualAirlineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVirtualAirlineRequest& a, GetVirtualAirlineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualAirlineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualAirlineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualAirlineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualAirlineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetVirtualAirlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetVirtualAirlineRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.GetVirtualAirlineRequest";
  }
  protected:
  explicit GetVirtualAirlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.GetVirtualAirlineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto;
};
// -------------------------------------------------------------------

class GetVirtualAirlineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.GetVirtualAirlineResponse) */ {
 public:
  inline GetVirtualAirlineResponse() : GetVirtualAirlineResponse(nullptr) {}
  ~GetVirtualAirlineResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualAirlineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualAirlineResponse(const GetVirtualAirlineResponse& from);
  GetVirtualAirlineResponse(GetVirtualAirlineResponse&& from) noexcept
    : GetVirtualAirlineResponse() {
    *this = ::std::move(from);
  }

  inline GetVirtualAirlineResponse& operator=(const GetVirtualAirlineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualAirlineResponse& operator=(GetVirtualAirlineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVirtualAirlineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualAirlineResponse* internal_default_instance() {
    return reinterpret_cast<const GetVirtualAirlineResponse*>(
               &_GetVirtualAirlineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetVirtualAirlineResponse& a, GetVirtualAirlineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualAirlineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualAirlineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualAirlineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualAirlineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVirtualAirlineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetVirtualAirlineResponse& from) {
    GetVirtualAirlineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVirtualAirlineResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.GetVirtualAirlineResponse";
  }
  protected:
  explicit GetVirtualAirlineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualAirlineFieldNumber = 1,
  };
  // .vasystem.api.v2.VirtualAirline virtual_airline = 1 [json_name = "virtualAirline"];
  bool has_virtual_airline() const;
  private:
  bool _internal_has_virtual_airline() const;
  public:
  void clear_virtual_airline();
  const ::vasystem::api::v2::VirtualAirline& virtual_airline() const;
  PROTOBUF_NODISCARD ::vasystem::api::v2::VirtualAirline* release_virtual_airline();
  ::vasystem::api::v2::VirtualAirline* mutable_virtual_airline();
  void set_allocated_virtual_airline(::vasystem::api::v2::VirtualAirline* virtual_airline);
  private:
  const ::vasystem::api::v2::VirtualAirline& _internal_virtual_airline() const;
  ::vasystem::api::v2::VirtualAirline* _internal_mutable_virtual_airline();
  public:
  void unsafe_arena_set_allocated_virtual_airline(
      ::vasystem::api::v2::VirtualAirline* virtual_airline);
  ::vasystem::api::v2::VirtualAirline* unsafe_arena_release_virtual_airline();

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.GetVirtualAirlineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::vasystem::api::v2::VirtualAirline* virtual_airline_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto;
};
// -------------------------------------------------------------------

class VirtualAirline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vasystem.api.v2.VirtualAirline) */ {
 public:
  inline VirtualAirline() : VirtualAirline(nullptr) {}
  ~VirtualAirline() override;
  explicit PROTOBUF_CONSTEXPR VirtualAirline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VirtualAirline(const VirtualAirline& from);
  VirtualAirline(VirtualAirline&& from) noexcept
    : VirtualAirline() {
    *this = ::std::move(from);
  }

  inline VirtualAirline& operator=(const VirtualAirline& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualAirline& operator=(VirtualAirline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualAirline& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualAirline* internal_default_instance() {
    return reinterpret_cast<const VirtualAirline*>(
               &_VirtualAirline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VirtualAirline& a, VirtualAirline& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualAirline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualAirline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualAirline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualAirline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VirtualAirline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VirtualAirline& from) {
    VirtualAirline::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualAirline* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vasystem.api.v2.VirtualAirline";
  }
  protected:
  explicit VirtualAirline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 2 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:vasystem.api.v2.VirtualAirline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVirtualAirlineRequest

// -------------------------------------------------------------------

// GetVirtualAirlineResponse

// .vasystem.api.v2.VirtualAirline virtual_airline = 1 [json_name = "virtualAirline"];
inline bool GetVirtualAirlineResponse::_internal_has_virtual_airline() const {
  return this != internal_default_instance() && _impl_.virtual_airline_ != nullptr;
}
inline bool GetVirtualAirlineResponse::has_virtual_airline() const {
  return _internal_has_virtual_airline();
}
inline void GetVirtualAirlineResponse::clear_virtual_airline() {
  if (GetArenaForAllocation() == nullptr && _impl_.virtual_airline_ != nullptr) {
    delete _impl_.virtual_airline_;
  }
  _impl_.virtual_airline_ = nullptr;
}
inline const ::vasystem::api::v2::VirtualAirline& GetVirtualAirlineResponse::_internal_virtual_airline() const {
  const ::vasystem::api::v2::VirtualAirline* p = _impl_.virtual_airline_;
  return p != nullptr ? *p : reinterpret_cast<const ::vasystem::api::v2::VirtualAirline&>(
      ::vasystem::api::v2::_VirtualAirline_default_instance_);
}
inline const ::vasystem::api::v2::VirtualAirline& GetVirtualAirlineResponse::virtual_airline() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.GetVirtualAirlineResponse.virtual_airline)
  return _internal_virtual_airline();
}
inline void GetVirtualAirlineResponse::unsafe_arena_set_allocated_virtual_airline(
    ::vasystem::api::v2::VirtualAirline* virtual_airline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.virtual_airline_);
  }
  _impl_.virtual_airline_ = virtual_airline;
  if (virtual_airline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vasystem.api.v2.GetVirtualAirlineResponse.virtual_airline)
}
inline ::vasystem::api::v2::VirtualAirline* GetVirtualAirlineResponse::release_virtual_airline() {
  
  ::vasystem::api::v2::VirtualAirline* temp = _impl_.virtual_airline_;
  _impl_.virtual_airline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vasystem::api::v2::VirtualAirline* GetVirtualAirlineResponse::unsafe_arena_release_virtual_airline() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.GetVirtualAirlineResponse.virtual_airline)
  
  ::vasystem::api::v2::VirtualAirline* temp = _impl_.virtual_airline_;
  _impl_.virtual_airline_ = nullptr;
  return temp;
}
inline ::vasystem::api::v2::VirtualAirline* GetVirtualAirlineResponse::_internal_mutable_virtual_airline() {
  
  if (_impl_.virtual_airline_ == nullptr) {
    auto* p = CreateMaybeMessage<::vasystem::api::v2::VirtualAirline>(GetArenaForAllocation());
    _impl_.virtual_airline_ = p;
  }
  return _impl_.virtual_airline_;
}
inline ::vasystem::api::v2::VirtualAirline* GetVirtualAirlineResponse::mutable_virtual_airline() {
  ::vasystem::api::v2::VirtualAirline* _msg = _internal_mutable_virtual_airline();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.GetVirtualAirlineResponse.virtual_airline)
  return _msg;
}
inline void GetVirtualAirlineResponse::set_allocated_virtual_airline(::vasystem::api::v2::VirtualAirline* virtual_airline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.virtual_airline_;
  }
  if (virtual_airline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(virtual_airline);
    if (message_arena != submessage_arena) {
      virtual_airline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_airline, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.virtual_airline_ = virtual_airline;
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.GetVirtualAirlineResponse.virtual_airline)
}

// -------------------------------------------------------------------

// VirtualAirline

// string name = 1 [json_name = "name"];
inline void VirtualAirline::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VirtualAirline::name() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.VirtualAirline.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualAirline::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.VirtualAirline.name)
}
inline std::string* VirtualAirline::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.VirtualAirline.name)
  return _s;
}
inline const std::string& VirtualAirline::_internal_name() const {
  return _impl_.name_.Get();
}
inline void VirtualAirline::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualAirline::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualAirline::release_name() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.VirtualAirline.name)
  return _impl_.name_.Release();
}
inline void VirtualAirline::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.VirtualAirline.name)
}

// string url = 2 [json_name = "url"];
inline void VirtualAirline::clear_url() {
  _impl_.url_.ClearToEmpty();
}
inline const std::string& VirtualAirline::url() const {
  // @@protoc_insertion_point(field_get:vasystem.api.v2.VirtualAirline.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VirtualAirline::set_url(ArgT0&& arg0, ArgT... args) {
 
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vasystem.api.v2.VirtualAirline.url)
}
inline std::string* VirtualAirline::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:vasystem.api.v2.VirtualAirline.url)
  return _s;
}
inline const std::string& VirtualAirline::_internal_url() const {
  return _impl_.url_.Get();
}
inline void VirtualAirline::_internal_set_url(const std::string& value) {
  
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* VirtualAirline::_internal_mutable_url() {
  
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* VirtualAirline::release_url() {
  // @@protoc_insertion_point(field_release:vasystem.api.v2.VirtualAirline.url)
  return _impl_.url_.Release();
}
inline void VirtualAirline::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vasystem.api.v2.VirtualAirline.url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace api
}  // namespace vasystem

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vasystem_2fapi_2fv2_2fvirtual_5fairlines_2eproto
