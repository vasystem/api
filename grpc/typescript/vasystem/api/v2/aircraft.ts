/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,ts_nocheck,eslint_disable
// @generated from protobuf file "vasystem/api/v2/aircraft.proto" (package "vasystem.api.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Airline } from "./airlines";
/**
 * An AircraftType resource represents a type of aircraft, irrespective of the airline that operates it.
 *
 * @generated from protobuf message vasystem.api.v2.AircraftType
 */
export interface AircraftType {
    /**
     * Unique identifier of the aircraft type.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The ICAO aircraft type code. Unique.
     * Example: `B738`
     *
     * @generated from protobuf field: string icao_code = 2;
     */
    icaoCode: string;
    /**
     * The IATA aircraft type code.
     * Example: `738`
     *
     * @generated from protobuf field: string iata_code = 3;
     */
    iataCode: string;
    /**
     * The name of the aircraft type.
     * Example: `Boeing 737-800`
     *
     * @generated from protobuf field: string name = 4;
     */
    name: string;
}
/**
 * An AircraftModel resource represents a model of aircraft. An aircraft model is an aircraft type linked
 * to an airline and its configuration (usually seating configuration).
 *
 * @generated from protobuf message vasystem.api.v2.AircraftModel
 */
export interface AircraftModel {
    /**
     * Unique identifier of the aircraft model.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The type of aircraft.
     *
     * @generated from protobuf field: vasystem.api.v2.AircraftType aircraft_type = 2;
     */
    aircraftType?: AircraftType;
    /**
     * The airline that operates the aircraft model.
     *
     * @generated from protobuf field: vasystem.api.v2.Airline airline = 3;
     */
    airline?: Airline;
    /**
     * The name of the aircraft model.
     * Example: `	Boeing 737-824(WL)`
     *
     * @generated from protobuf field: string name = 4;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class AircraftType$Type extends MessageType<AircraftType> {
    constructor() {
        super("vasystem.api.v2.AircraftType", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icao_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "iata_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AircraftType>): AircraftType {
        const message = { id: "", icaoCode: "", iataCode: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AircraftType>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AircraftType): AircraftType {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string icao_code */ 2:
                    message.icaoCode = reader.string();
                    break;
                case /* string iata_code */ 3:
                    message.iataCode = reader.string();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AircraftType, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string icao_code = 2; */
        if (message.icaoCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icaoCode);
        /* string iata_code = 3; */
        if (message.iataCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.iataCode);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.AircraftType
 */
export const AircraftType = new AircraftType$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AircraftModel$Type extends MessageType<AircraftModel> {
    constructor() {
        super("vasystem.api.v2.AircraftModel", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "aircraft_type", kind: "message", T: () => AircraftType },
            { no: 3, name: "airline", kind: "message", T: () => Airline },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AircraftModel>): AircraftModel {
        const message = { id: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AircraftModel>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AircraftModel): AircraftModel {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* vasystem.api.v2.AircraftType aircraft_type */ 2:
                    message.aircraftType = AircraftType.internalBinaryRead(reader, reader.uint32(), options, message.aircraftType);
                    break;
                case /* vasystem.api.v2.Airline airline */ 3:
                    message.airline = Airline.internalBinaryRead(reader, reader.uint32(), options, message.airline);
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AircraftModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* vasystem.api.v2.AircraftType aircraft_type = 2; */
        if (message.aircraftType)
            AircraftType.internalBinaryWrite(message.aircraftType, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* vasystem.api.v2.Airline airline = 3; */
        if (message.airline)
            Airline.internalBinaryWrite(message.airline, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.AircraftModel
 */
export const AircraftModel = new AircraftModel$Type();
