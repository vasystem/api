/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,ts_nocheck,eslint_disable
// @generated from protobuf file "vasystem/api/v2/airlines.proto" (package "vasystem.api.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message vasystem.api.v2.ListAirlinesRequest
 */
export interface ListAirlinesRequest {
}
/**
 * @generated from protobuf message vasystem.api.v2.ListAirlinesResponse
 */
export interface ListAirlinesResponse {
    /**
     * @generated from protobuf field: repeated vasystem.api.v2.Airline airlines = 1;
     */
    airlines: Airline[];
}
/**
 * @generated from protobuf message vasystem.api.v2.Airline
 */
export interface Airline {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The ICAO code is the unique identifier of the airline.
     *
     * @generated from protobuf field: string icao_code = 2;
     */
    icaoCode: string;
    /**
     * @generated from protobuf field: string iata_code = 3;
     */
    iataCode: string;
    /**
     * @generated from protobuf field: string display_icao_code = 4;
     */
    displayIcaoCode: string;
    /**
     * @generated from protobuf field: string display_iata_code = 5;
     */
    displayIataCode: string;
    /**
     * @generated from protobuf field: string name = 6;
     */
    name: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListAirlinesRequest$Type extends MessageType<ListAirlinesRequest> {
    constructor() {
        super("vasystem.api.v2.ListAirlinesRequest", []);
    }
    create(value?: PartialMessage<ListAirlinesRequest>): ListAirlinesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAirlinesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAirlinesRequest): ListAirlinesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListAirlinesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.ListAirlinesRequest
 */
export const ListAirlinesRequest = new ListAirlinesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAirlinesResponse$Type extends MessageType<ListAirlinesResponse> {
    constructor() {
        super("vasystem.api.v2.ListAirlinesResponse", [
            { no: 1, name: "airlines", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Airline }
        ]);
    }
    create(value?: PartialMessage<ListAirlinesResponse>): ListAirlinesResponse {
        const message = { airlines: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAirlinesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAirlinesResponse): ListAirlinesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated vasystem.api.v2.Airline airlines */ 1:
                    message.airlines.push(Airline.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAirlinesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated vasystem.api.v2.Airline airlines = 1; */
        for (let i = 0; i < message.airlines.length; i++)
            Airline.internalBinaryWrite(message.airlines[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.ListAirlinesResponse
 */
export const ListAirlinesResponse = new ListAirlinesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Airline$Type extends MessageType<Airline> {
    constructor() {
        super("vasystem.api.v2.Airline", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "icao_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "iata_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "display_icao_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_iata_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Airline>): Airline {
        const message = { id: "", icaoCode: "", iataCode: "", displayIcaoCode: "", displayIataCode: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Airline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Airline): Airline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string icao_code */ 2:
                    message.icaoCode = reader.string();
                    break;
                case /* string iata_code */ 3:
                    message.iataCode = reader.string();
                    break;
                case /* string display_icao_code */ 4:
                    message.displayIcaoCode = reader.string();
                    break;
                case /* string display_iata_code */ 5:
                    message.displayIataCode = reader.string();
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Airline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string icao_code = 2; */
        if (message.icaoCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.icaoCode);
        /* string iata_code = 3; */
        if (message.iataCode !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.iataCode);
        /* string display_icao_code = 4; */
        if (message.displayIcaoCode !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.displayIcaoCode);
        /* string display_iata_code = 5; */
        if (message.displayIataCode !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.displayIataCode);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.Airline
 */
export const Airline = new Airline$Type();
/**
 * @generated ServiceType for protobuf service vasystem.api.v2.AirlinesService
 */
export const AirlinesService = new ServiceType("vasystem.api.v2.AirlinesService", [
    { name: "ListAirlines", options: {}, I: ListAirlinesRequest, O: ListAirlinesResponse }
]);
