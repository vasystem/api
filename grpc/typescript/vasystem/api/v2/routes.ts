/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,ts_nocheck,eslint_disable
// @generated from protobuf file "vasystem/api/v2/routes.proto" (package "vasystem.api.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AircraftModel } from "./aircraft";
import { DayOfWeek } from "./dayofweek";
import { Duration } from "../../../google/protobuf/duration";
import { TimeOfDay } from "./timeofday";
import { Airport } from "./airports";
import { Airline } from "./airlines";
/**
 * @generated from protobuf message vasystem.api.v2.ListRoutesRequest
 */
export interface ListRoutesRequest {
    /**
     * Filter by airline.
     *
     * @generated from protobuf field: string airline_id = 1;
     */
    airlineId: string;
    /**
     * Filter by departure airport.
     *
     * @generated from protobuf field: string departure_icao = 2;
     */
    departureIcao: string;
    /**
     * Filter by arrival airport.
     *
     * @generated from protobuf field: string arrival_icao = 3;
     */
    arrivalIcao: string;
    /**
     * Filter by the flight number. This does not include the airline code.
     *
     * @generated from protobuf field: string icao_flight_number = 4;
     */
    icaoFlightNumber: string;
    /**
     * Whether to include archived routes. Defaults to false.
     *
     * @generated from protobuf field: bool include_archived = 5;
     */
    includeArchived: boolean;
    /**
     * Default is 100.
     *
     * @generated from protobuf field: uint64 page_size = 14;
     */
    pageSize: string;
    /**
     * The next_page_token value returned from a previous List request, if any.
     * If used, all other parameters must match the call that provided the token.
     *
     * @generated from protobuf field: string page_token = 15;
     */
    pageToken: string;
}
/**
 * @generated from protobuf message vasystem.api.v2.ListRoutesResponse
 */
export interface ListRoutesResponse {
    /**
     * @generated from protobuf field: repeated vasystem.api.v2.Route routes = 1;
     */
    routes: Route[];
    /**
     * The next_page_token value to include in a subsequent List request. When
     * paginating, all other parameters provided to List must match the call that
     * provided the page token.
     *
     * @generated from protobuf field: string next_page_token = 2;
     */
    nextPageToken: string;
}
/**
 * @generated from protobuf message vasystem.api.v2.Route
 */
export interface Route {
    /**
     * The unique identifier for the route.
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The airline that operates this route.
     *
     * @generated from protobuf field: vasystem.api.v2.Airline airline = 2;
     */
    airline?: Airline;
    /**
     * This does not include the airline code.
     *
     * @generated from protobuf field: string icao_flight_number = 3;
     */
    icaoFlightNumber: string;
    /**
     * The departure airport.
     *
     * @generated from protobuf field: vasystem.api.v2.Airport departure = 5;
     */
    departure?: Airport;
    /**
     * The arrival airport.
     *
     * @generated from protobuf field: vasystem.api.v2.Airport arrival = 6;
     */
    arrival?: Airport;
    /**
     * Departure time is in UTC.
     *
     * @generated from protobuf field: vasystem.api.v2.TimeOfDay departure_time = 7;
     */
    departureTime?: TimeOfDay;
    /**
     * Arrival time is in UTC.
     *
     * @generated from protobuf field: vasystem.api.v2.TimeOfDay arrival_time = 8;
     */
    arrivalTime?: TimeOfDay;
    /**
     * The duration of this flight. Can also be calculated from the departure
     * and arrival times.
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 9;
     */
    duration?: Duration;
    /**
     * The days of the week that this flight operates.
     *
     * @generated from protobuf field: repeated vasystem.api.v2.DayOfWeek days_flown = 10;
     */
    daysFlown: DayOfWeek[];
    /**
     * The aircraft models that operate this route.
     *
     * @generated from protobuf field: repeated vasystem.api.v2.AircraftModel aircraft_models = 11;
     */
    aircraftModels: AircraftModel[];
    /**
     * Whether this route is archived.
     *
     * @generated from protobuf field: bool archived = 16;
     */
    archived: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRoutesRequest$Type extends MessageType<ListRoutesRequest> {
    constructor() {
        super("vasystem.api.v2.ListRoutesRequest", [
            { no: 1, name: "airline_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "departure_icao", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "arrival_icao", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "icao_flight_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "include_archived", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "page_size", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 15, name: "page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListRoutesRequest>): ListRoutesRequest {
        const message = { airlineId: "", departureIcao: "", arrivalIcao: "", icaoFlightNumber: "", includeArchived: false, pageSize: "0", pageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRoutesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoutesRequest): ListRoutesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string airline_id */ 1:
                    message.airlineId = reader.string();
                    break;
                case /* string departure_icao */ 2:
                    message.departureIcao = reader.string();
                    break;
                case /* string arrival_icao */ 3:
                    message.arrivalIcao = reader.string();
                    break;
                case /* string icao_flight_number */ 4:
                    message.icaoFlightNumber = reader.string();
                    break;
                case /* bool include_archived */ 5:
                    message.includeArchived = reader.bool();
                    break;
                case /* uint64 page_size */ 14:
                    message.pageSize = reader.uint64().toString();
                    break;
                case /* string page_token */ 15:
                    message.pageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoutesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string airline_id = 1; */
        if (message.airlineId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.airlineId);
        /* string departure_icao = 2; */
        if (message.departureIcao !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.departureIcao);
        /* string arrival_icao = 3; */
        if (message.arrivalIcao !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.arrivalIcao);
        /* string icao_flight_number = 4; */
        if (message.icaoFlightNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.icaoFlightNumber);
        /* bool include_archived = 5; */
        if (message.includeArchived !== false)
            writer.tag(5, WireType.Varint).bool(message.includeArchived);
        /* uint64 page_size = 14; */
        if (message.pageSize !== "0")
            writer.tag(14, WireType.Varint).uint64(message.pageSize);
        /* string page_token = 15; */
        if (message.pageToken !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.pageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.ListRoutesRequest
 */
export const ListRoutesRequest = new ListRoutesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRoutesResponse$Type extends MessageType<ListRoutesResponse> {
    constructor() {
        super("vasystem.api.v2.ListRoutesResponse", [
            { no: 1, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Route },
            { no: 2, name: "next_page_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListRoutesResponse>): ListRoutesResponse {
        const message = { routes: [], nextPageToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListRoutesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRoutesResponse): ListRoutesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated vasystem.api.v2.Route routes */ 1:
                    message.routes.push(Route.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string next_page_token */ 2:
                    message.nextPageToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRoutesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated vasystem.api.v2.Route routes = 1; */
        for (let i = 0; i < message.routes.length; i++)
            Route.internalBinaryWrite(message.routes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string next_page_token = 2; */
        if (message.nextPageToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nextPageToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.ListRoutesResponse
 */
export const ListRoutesResponse = new ListRoutesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Route$Type extends MessageType<Route> {
    constructor() {
        super("vasystem.api.v2.Route", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "airline", kind: "message", T: () => Airline },
            { no: 3, name: "icao_flight_number", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "departure", kind: "message", T: () => Airport },
            { no: 6, name: "arrival", kind: "message", T: () => Airport },
            { no: 7, name: "departure_time", kind: "message", T: () => TimeOfDay },
            { no: 8, name: "arrival_time", kind: "message", T: () => TimeOfDay },
            { no: 9, name: "duration", kind: "message", T: () => Duration },
            { no: 10, name: "days_flown", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["vasystem.api.v2.DayOfWeek", DayOfWeek, "DAY_OF_WEEK_"] },
            { no: 11, name: "aircraft_models", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AircraftModel },
            { no: 16, name: "archived", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Route>): Route {
        const message = { id: "", icaoFlightNumber: "", daysFlown: [], aircraftModels: [], archived: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Route>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Route): Route {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* vasystem.api.v2.Airline airline */ 2:
                    message.airline = Airline.internalBinaryRead(reader, reader.uint32(), options, message.airline);
                    break;
                case /* string icao_flight_number */ 3:
                    message.icaoFlightNumber = reader.string();
                    break;
                case /* vasystem.api.v2.Airport departure */ 5:
                    message.departure = Airport.internalBinaryRead(reader, reader.uint32(), options, message.departure);
                    break;
                case /* vasystem.api.v2.Airport arrival */ 6:
                    message.arrival = Airport.internalBinaryRead(reader, reader.uint32(), options, message.arrival);
                    break;
                case /* vasystem.api.v2.TimeOfDay departure_time */ 7:
                    message.departureTime = TimeOfDay.internalBinaryRead(reader, reader.uint32(), options, message.departureTime);
                    break;
                case /* vasystem.api.v2.TimeOfDay arrival_time */ 8:
                    message.arrivalTime = TimeOfDay.internalBinaryRead(reader, reader.uint32(), options, message.arrivalTime);
                    break;
                case /* google.protobuf.Duration duration */ 9:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* repeated vasystem.api.v2.DayOfWeek days_flown */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.daysFlown.push(reader.int32());
                    else
                        message.daysFlown.push(reader.int32());
                    break;
                case /* repeated vasystem.api.v2.AircraftModel aircraft_models */ 11:
                    message.aircraftModels.push(AircraftModel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool archived */ 16:
                    message.archived = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Route, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* vasystem.api.v2.Airline airline = 2; */
        if (message.airline)
            Airline.internalBinaryWrite(message.airline, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string icao_flight_number = 3; */
        if (message.icaoFlightNumber !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.icaoFlightNumber);
        /* vasystem.api.v2.Airport departure = 5; */
        if (message.departure)
            Airport.internalBinaryWrite(message.departure, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* vasystem.api.v2.Airport arrival = 6; */
        if (message.arrival)
            Airport.internalBinaryWrite(message.arrival, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* vasystem.api.v2.TimeOfDay departure_time = 7; */
        if (message.departureTime)
            TimeOfDay.internalBinaryWrite(message.departureTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* vasystem.api.v2.TimeOfDay arrival_time = 8; */
        if (message.arrivalTime)
            TimeOfDay.internalBinaryWrite(message.arrivalTime, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 9; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated vasystem.api.v2.DayOfWeek days_flown = 10; */
        if (message.daysFlown.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.daysFlown.length; i++)
                writer.int32(message.daysFlown[i]);
            writer.join();
        }
        /* repeated vasystem.api.v2.AircraftModel aircraft_models = 11; */
        for (let i = 0; i < message.aircraftModels.length; i++)
            AircraftModel.internalBinaryWrite(message.aircraftModels[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool archived = 16; */
        if (message.archived !== false)
            writer.tag(16, WireType.Varint).bool(message.archived);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.Route
 */
export const Route = new Route$Type();
/**
 * @generated ServiceType for protobuf service vasystem.api.v2.RoutesService
 */
export const RoutesService = new ServiceType("vasystem.api.v2.RoutesService", [
    { name: "ListRoutes", options: {}, I: ListRoutesRequest, O: ListRoutesResponse }
]);
