/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter long_type_string,ts_nocheck,eslint_disable
// @generated from protobuf file "vasystem/api/v2/virtual_airlines.proto" (package "vasystem.api.v2", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message vasystem.api.v2.GetVirtualAirlineRequest
 */
export interface GetVirtualAirlineRequest {
}
/**
 * @generated from protobuf message vasystem.api.v2.GetVirtualAirlineResponse
 */
export interface GetVirtualAirlineResponse {
    /**
     * @generated from protobuf field: vasystem.api.v2.VirtualAirline virtual_airline = 1;
     */
    virtualAirline?: VirtualAirline;
}
/**
 * @generated from protobuf message vasystem.api.v2.VirtualAirline
 */
export interface VirtualAirline {
    /**
     * The name of the virtual airline.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetVirtualAirlineRequest$Type extends MessageType<GetVirtualAirlineRequest> {
    constructor() {
        super("vasystem.api.v2.GetVirtualAirlineRequest", []);
    }
    create(value?: PartialMessage<GetVirtualAirlineRequest>): GetVirtualAirlineRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetVirtualAirlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVirtualAirlineRequest): GetVirtualAirlineRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetVirtualAirlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.GetVirtualAirlineRequest
 */
export const GetVirtualAirlineRequest = new GetVirtualAirlineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetVirtualAirlineResponse$Type extends MessageType<GetVirtualAirlineResponse> {
    constructor() {
        super("vasystem.api.v2.GetVirtualAirlineResponse", [
            { no: 1, name: "virtual_airline", kind: "message", T: () => VirtualAirline }
        ]);
    }
    create(value?: PartialMessage<GetVirtualAirlineResponse>): GetVirtualAirlineResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetVirtualAirlineResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetVirtualAirlineResponse): GetVirtualAirlineResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vasystem.api.v2.VirtualAirline virtual_airline */ 1:
                    message.virtualAirline = VirtualAirline.internalBinaryRead(reader, reader.uint32(), options, message.virtualAirline);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetVirtualAirlineResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* vasystem.api.v2.VirtualAirline virtual_airline = 1; */
        if (message.virtualAirline)
            VirtualAirline.internalBinaryWrite(message.virtualAirline, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.GetVirtualAirlineResponse
 */
export const GetVirtualAirlineResponse = new GetVirtualAirlineResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VirtualAirline$Type extends MessageType<VirtualAirline> {
    constructor() {
        super("vasystem.api.v2.VirtualAirline", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VirtualAirline>): VirtualAirline {
        const message = { name: "", url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VirtualAirline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VirtualAirline): VirtualAirline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VirtualAirline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vasystem.api.v2.VirtualAirline
 */
export const VirtualAirline = new VirtualAirline$Type();
/**
 * @generated ServiceType for protobuf service vasystem.api.v2.VirtualAirlinesService
 */
export const VirtualAirlinesService = new ServiceType("vasystem.api.v2.VirtualAirlinesService", [
    { name: "GetVirtualAirline", options: {}, I: GetVirtualAirlineRequest, O: GetVirtualAirlineResponse }
]);
